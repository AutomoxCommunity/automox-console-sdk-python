"""
    Automox Console API

    API for use with the Automox Console  # noqa: E501

    The version of the OpenAPI document: 2021-08-10
    Contact: support@automox.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from automox_console_sdk.api_client import ApiClient, Endpoint as _Endpoint
from automox_console_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from automox_console_sdk.model.data_extract import DataExtract
from automox_console_sdk.model.inline_response403 import InlineResponse403
from automox_console_sdk.model.unknownbasetype import UNKNOWNBASETYPE


class ExtractsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_extract(
            self,
            o,
            unknown_base_type,
            **kwargs
        ):
            """Creates a new Data Extract.  # noqa: E501

            Create a new Data Extract.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_extract(o, unknown_base_type, async_req=True)
            >>> result = thread.get()

            Args:
                o (int): Organization ID
                unknown_base_type (UNKNOWN_BASE_TYPE): Create Data Extract

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [DataExtract]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['o'] = \
                o
            kwargs['unknown_base_type'] = \
                unknown_base_type
            return self.call_with_http_info(**kwargs)

        self.create_extract = _Endpoint(
            settings={
                'response_type': ([DataExtract],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data-extracts',
                'operation_id': 'create_extract',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'o',
                    'unknown_base_type',
                ],
                'required': [
                    'o',
                    'unknown_base_type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'o':
                        (int,),
                    'unknown_base_type':
                        (UNKNOWN_BASE_TYPE,),
                },
                'attribute_map': {
                    'o': 'o',
                },
                'location_map': {
                    'o': 'query',
                    'unknown_base_type': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_extract
        )

        def __download_data_extract(
            self,
            id,
            o,
            **kwargs
        ):
            """Download the CSV for a completed Data Extract job.  # noqa: E501

            Downloads the CSV for a completed Data Extract job. Triggers an automatic download of the CSV file.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.download_data_extract(id, o, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): The ID of the Data Extract to download.
                o (int): Organization ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str, none_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['o'] = \
                o
            return self.call_with_http_info(**kwargs)

        self.download_data_extract = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data-extracts/{id}/download',
                'operation_id': 'download_data_extract',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'o',
                ],
                'required': [
                    'id',
                    'o',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'o':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'o': 'o',
                },
                'location_map': {
                    'id': 'path',
                    'o': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/octet-stream',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__download_data_extract
        )

        def __get_data_extract_by_id(
            self,
            id,
            **kwargs
        ):
            """Show a new Data Extract job.  # noqa: E501

            Retrieves a specific Data Extract job.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_data_extract_by_id(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): The ID of the Data Extract you want to view.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [DataExtract]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_data_extract_by_id = _Endpoint(
            settings={
                'response_type': ([DataExtract],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data-extracts/{id}',
                'operation_id': 'get_data_extract_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_data_extract_by_id
        )

        def __get_data_extracts(
            self,
            o,
            **kwargs
        ):
            """List all Data Extracts for an Organization  # noqa: E501

            List all Data extracts for an organization with ability to filter and sort results.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_data_extracts(o, async_req=True)
            >>> result = thread.get()

            Args:
                o (int): Limit response to a specific Automox organization

            Keyword Args:
                limit (int): A limit on the number of results to be returned, between 1 and 500, with a default of 25. Use with page parameter.. [optional] if omitted the server will use the default value of 25
                page (int): The page of results you wish to be returned with page numbers starting at 0. Default: 0.. [optional] if omitted the server will use the default value of 0
                sort ([str]): The sort for the results. Options: created_at:desc/asc and status:desc/asc. Default: created_at:desc. [optional]
                typeequals (str): The type of Data Extracts to list. Options: data-extract.. [optional] if omitted the server will use the default value of "patch-history"
                created_atgreater_than (datetime): Created at date is greater than the value submitted. If a time is not specified, greater_than will have a time of start of day.. [optional]
                created_atlesser_than (datetime): Created at date is less than the value submitted. If a time is not specified, less_than will have a time of end of day.. [optional]
                created_atgreater_than_or_equals (datetime): Created at date is greater than or equals the value submitted. If a time is not specified, greater_than_or_equals will have a time of start of day.. [optional]
                created_atlesser_than_or_equals (datetime): Created at date is lesser than or equals the value submitted. If a time is not specified, less_than_or_equals will have a time of end of day.. [optional]
                statusequals (str): Find jobs with a specific status. Options: queued, running, complete, failed, canceled, expired. [optional]
                statusin ([str]): Find jobs with one or more of these statuses.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [DataExtract]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['o'] = \
                o
            return self.call_with_http_info(**kwargs)

        self.get_data_extracts = _Endpoint(
            settings={
                'response_type': ([DataExtract],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/data-extracts',
                'operation_id': 'get_data_extracts',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'o',
                    'limit',
                    'page',
                    'sort',
                    'typeequals',
                    'created_atgreater_than',
                    'created_atlesser_than',
                    'created_atgreater_than_or_equals',
                    'created_atlesser_than_or_equals',
                    'statusequals',
                    'statusin',
                ],
                'required': [
                    'o',
                ],
                'nullable': [
                ],
                'enum': [
                    'sort',
                    'typeequals',
                    'statusequals',
                    'statusin',
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('sort',): {

                        "CREATED_AT:DESC": "created_at:desc",
                        "CREATED_AT:ASC": "created_at:asc",
                        "STATUS:DESC": "status:desc",
                        "STATUS:ASC": "status:asc"
                    },
                    ('typeequals',): {

                        "PATCH-HISTORY": "patch-history"
                    },
                    ('statusequals',): {

                        "QUEUED": "queued",
                        "RUNNING": "running",
                        "COMPLETE": "complete",
                        "FAILED": "failed",
                        "CANCELED": "canceled",
                        "EXPIRED": "expired"
                    },
                    ('statusin',): {

                        "QUEUED": "queued",
                        "RUNNING": "running",
                        "COMPLETE": "complete",
                        "FAILED": "failed",
                        "CANCELED": "canceled",
                        "EXPIRED": "expired"
                    },
                },
                'openapi_types': {
                    'o':
                        (int,),
                    'limit':
                        (int,),
                    'page':
                        (int,),
                    'sort':
                        ([str],),
                    'typeequals':
                        (str,),
                    'created_atgreater_than':
                        (datetime,),
                    'created_atlesser_than':
                        (datetime,),
                    'created_atgreater_than_or_equals':
                        (datetime,),
                    'created_atlesser_than_or_equals':
                        (datetime,),
                    'statusequals':
                        (str,),
                    'statusin':
                        ([str],),
                },
                'attribute_map': {
                    'o': 'o',
                    'limit': 'limit',
                    'page': 'page',
                    'sort': 'sort',
                    'typeequals': 'type:equals',
                    'created_atgreater_than': 'created_at:greater_than',
                    'created_atlesser_than': 'created_at:lesser_than',
                    'created_atgreater_than_or_equals': 'created_at:greater_than_or_equals',
                    'created_atlesser_than_or_equals': 'created_at:lesser_than_or_equals',
                    'statusequals': 'status:equals',
                    'statusin': 'status:in',
                },
                'location_map': {
                    'o': 'query',
                    'limit': 'query',
                    'page': 'query',
                    'sort': 'query',
                    'typeequals': 'query',
                    'created_atgreater_than': 'query',
                    'created_atlesser_than': 'query',
                    'created_atgreater_than_or_equals': 'query',
                    'created_atlesser_than_or_equals': 'query',
                    'statusequals': 'query',
                    'statusin': 'query',
                },
                'collection_format_map': {
                    'sort': 'multi',
                    'statusin': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_data_extracts
        )
