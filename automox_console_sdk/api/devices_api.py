"""
    Automox Console API

    API for use with the Automox Console  # noqa: E501

    The version of the OpenAPI document: 2021-08-10
    Contact: support@automox.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from automox_console_sdk.api_client import ApiClient, Endpoint as _Endpoint
from automox_console_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from automox_console_sdk.model.command import Command
from automox_console_sdk.model.inline_response403 import InlineResponse403
from automox_console_sdk.model.packages import Packages
from automox_console_sdk.model.server_list import ServerList
from automox_console_sdk.model.server_with_policies import ServerWithPolicies
from automox_console_sdk.model.unknownbasetype import UNKNOWNBASETYPE


class DevicesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __delete_device(
            self,
            id,
            o,
            **kwargs
        ):
            """Deletes a device (server object).  # noqa: E501

            Deletes a device (server object). The associated command queue will be purged. Any pending custom commands for the device are removed.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_device(id, o, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): Server ID for the specified device
                o (int): Organization ID for the specified device

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['o'] = \
                o
            return self.call_with_http_info(**kwargs)

        self.delete_device = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/servers/{id}',
                'operation_id': 'delete_device',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'o',
                ],
                'required': [
                    'id',
                    'o',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'o':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'o': 'o',
                },
                'location_map': {
                    'id': 'path',
                    'o': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_device
        )

        def __get_device_packages(
            self,
            id,
            o,
            **kwargs
        ):
            """List Software Packages for Specific Device  # noqa: E501

            Returns the software packages for the specified device. Packages Include: Pending updates and currently installed updates/applications  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_device_packages(id, o, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): Server ID for the specified device
                o (int): Organization ID for the specified device

            Keyword Args:
                page (int): The page of results you wish to be returned with page numbers starting at 0.. [optional] if omitted the server will use the default value of 0
                limit (int): A limit on the number of results to be returned, between 1 and 500 with a default of 500. Use with page parameter.. [optional] if omitted the server will use the default value of 500
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Packages]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['o'] = \
                o
            return self.call_with_http_info(**kwargs)

        self.get_device_packages = _Endpoint(
            settings={
                'response_type': ([Packages],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/servers/{id}/packages',
                'operation_id': 'get_device_packages',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'o',
                    'page',
                    'limit',
                ],
                'required': [
                    'id',
                    'o',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'o':
                        (int,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'o': 'o',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'id': 'path',
                    'o': 'query',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_device_packages
        )

        def __get_device_queues(
            self,
            id,
            o,
            **kwargs
        ):
            """Upcoming Commands Queue for Specific Device  # noqa: E501

            Returns the queue of upcoming commands for the specified device.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_device_queues(id, o, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): Server ID for the specified device
                o (int): Organization ID for the specified device

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Command]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['o'] = \
                o
            return self.call_with_http_info(**kwargs)

        self.get_device_queues = _Endpoint(
            settings={
                'response_type': ([Command],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/servers/{id}/queues',
                'operation_id': 'get_device_queues',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'o',
                ],
                'required': [
                    'id',
                    'o',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'o':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'o': 'o',
                },
                'location_map': {
                    'id': 'path',
                    'o': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_device_queues
        )

        def __get_devices(
            self,
            o,
            limit=500,
            page=0,
            **kwargs
        ):
            """List All Devices  # noqa: E501

            This retrieves a detailed list of all devices (server objects) for the authenticated user.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_devices(o, limit=500, page=0, async_req=True)
            >>> result = thread.get()

            Args:
                o (int): Organization ID. Response will include devices for the specified Automox Organization
                limit (int): A limit on the number of results to be returned, between 1 and 500 with a default of 500. Use with page parameter.. defaults to 500, must be one of [500]
                page (int): The page of results you wish to be returned with page numbers starting at 0.. defaults to 0, must be one of [0]

            Keyword Args:
                group_id (int): Filter based on membership to a specific Server Group ID. [optional]
                ps_version (int): Shows version of PowerShell running on the device, if applicable.. [optional]
                pending (int): Filter based on status of pending patches. Format: pending=1. [optional]
                patch_status (str): Filter based on presence of ANY available patches that aren't already installed. Value must be 'missing' Format: patchStatus=missing. [optional]
                policy_id (int): Filter based on association to a given Policy ID. [optional]
                exception (int): Filter based on device's Exception status. [optional]
                managed (int): Filter based on device's Managed status. Unmanaged indicates no linked policies.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ServerList]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['o'] = \
                o
            kwargs['limit'] = \
                limit
            kwargs['page'] = \
                page
            return self.call_with_http_info(**kwargs)

        self.get_devices = _Endpoint(
            settings={
                'response_type': ([ServerList],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/servers',
                'operation_id': 'get_devices',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'o',
                    'limit',
                    'page',
                    'group_id',
                    'ps_version',
                    'pending',
                    'patch_status',
                    'policy_id',
                    'exception',
                    'managed',
                ],
                'required': [
                    'o',
                    'limit',
                    'page',
                ],
                'nullable': [
                ],
                'enum': [
                    'pending',
                    'exception',
                    'managed',
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('pending',): {

                        "0": 0,
                        "1": 1
                    },
                    ('exception',): {

                        "0": 0,
                        "1": 1
                    },
                    ('managed',): {

                        "0": 0,
                        "1": 1
                    },
                },
                'openapi_types': {
                    'o':
                        (int,),
                    'limit':
                        (int,),
                    'page':
                        (int,),
                    'group_id':
                        (int,),
                    'ps_version':
                        (int,),
                    'pending':
                        (int,),
                    'patch_status':
                        (str,),
                    'policy_id':
                        (int,),
                    'exception':
                        (int,),
                    'managed':
                        (int,),
                },
                'attribute_map': {
                    'o': 'o',
                    'limit': 'limit',
                    'page': 'page',
                    'group_id': 'groupId',
                    'ps_version': 'PS_VERSION',
                    'pending': 'pending',
                    'patch_status': 'patchStatus',
                    'policy_id': 'policyId',
                    'exception': 'exception',
                    'managed': 'managed',
                },
                'location_map': {
                    'o': 'query',
                    'limit': 'query',
                    'page': 'query',
                    'group_id': 'query',
                    'ps_version': 'query',
                    'pending': 'query',
                    'patch_status': 'query',
                    'policy_id': 'query',
                    'exception': 'query',
                    'managed': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_devices
        )

        def __get_server(
            self,
            id,
            o,
            **kwargs
        ):
            """List a Specific Device  # noqa: E501

            Returns a specific device (server object) for the authenticated user.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_server(id, o, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): Server ID for the specified device
                o (int): Organization ID for the specified device

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ServerWithPolicies
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['o'] = \
                o
            return self.call_with_http_info(**kwargs)

        self.get_server = _Endpoint(
            settings={
                'response_type': (ServerWithPolicies,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/servers/{id}',
                'operation_id': 'get_server',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'o',
                ],
                'required': [
                    'id',
                    'o',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'o':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'o': 'o',
                },
                'location_map': {
                    'id': 'path',
                    'o': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_server
        )

        def __issue_device_command(
            self,
            id,
            o,
            **kwargs
        ):
            """Issue a command to a device  # noqa: E501

            Force a device to Scan, Patch, or Reboot for immediate execution. **Note: The `installAllUpdates` option ignores any Policy Filters**  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.issue_device_command(id, o, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): Server ID for the specified device
                o (int): Organization ID for the specified device

            Keyword Args:
                unknown_base_type (UNKNOWN_BASE_TYPE): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['o'] = \
                o
            return self.call_with_http_info(**kwargs)

        self.issue_device_command = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/servers/{id}/queues',
                'operation_id': 'issue_device_command',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'o',
                    'unknown_base_type',
                ],
                'required': [
                    'id',
                    'o',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'o':
                        (int,),
                    'unknown_base_type':
                        (UNKNOWN_BASE_TYPE,),
                },
                'attribute_map': {
                    'id': 'id',
                    'o': 'o',
                },
                'location_map': {
                    'id': 'path',
                    'o': 'query',
                    'unknown_base_type': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__issue_device_command
        )

        def __update_device(
            self,
            id,
            unknown_base_type,
            **kwargs
        ):
            """Updates a device (server object).  # noqa: E501

            Updates a device (server object).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_device(id, unknown_base_type, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): Server ID for the specified device
                unknown_base_type (UNKNOWN_BASE_TYPE): Device update

            Keyword Args:
                o (int): Organization ID for the specified device. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['unknown_base_type'] = \
                unknown_base_type
            return self.call_with_http_info(**kwargs)

        self.update_device = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/servers/{id}',
                'operation_id': 'update_device',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'unknown_base_type',
                    'o',
                ],
                'required': [
                    'id',
                    'unknown_base_type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'unknown_base_type':
                        (UNKNOWN_BASE_TYPE,),
                    'o':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'o': 'o',
                },
                'location_map': {
                    'id': 'path',
                    'unknown_base_type': 'body',
                    'o': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_device
        )
