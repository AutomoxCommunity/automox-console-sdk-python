"""
    Automox Console API

    API for use with the Automox Console  # noqa: E501

    The version of the OpenAPI document: 2021-08-10
    Contact: support@automox.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from automox_console_sdk.api_client import ApiClient, Endpoint as _Endpoint
from automox_console_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from automox_console_sdk.model.inline_response403 import InlineResponse403
from automox_console_sdk.model.policy import Policy
from automox_console_sdk.model.policy_device_filters_output import PolicyDeviceFiltersOutput
from automox_console_sdk.model.policy_device_filters_preview import PolicyDeviceFiltersPreview
from automox_console_sdk.model.policy_stats import PolicyStats
from automox_console_sdk.model.unknownbasetype import UNKNOWNBASETYPE


class PoliciesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_policy(
            self,
            o,
            **kwargs
        ):
            """Create a New Policy  # noqa: E501

            Creates a new policy for a specified organization. For more info on filter types and scheduling, see [Policies - Scheduling and Filtering](/developer-portal/policy_filters_schedule)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_policy(o, async_req=True)
            >>> result = thread.get()

            Args:
                o (int): Organization ID for retrieving policies

            Keyword Args:
                unknown_base_type (UNKNOWN_BASE_TYPE): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Policy]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['o'] = \
                o
            return self.call_with_http_info(**kwargs)

        self.create_policy = _Endpoint(
            settings={
                'response_type': ([Policy],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/policies',
                'operation_id': 'create_policy',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'o',
                    'unknown_base_type',
                ],
                'required': [
                    'o',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'o':
                        (int,),
                    'unknown_base_type':
                        (UNKNOWN_BASE_TYPE,),
                },
                'attribute_map': {
                    'o': 'o',
                },
                'location_map': {
                    'o': 'query',
                    'unknown_base_type': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_policy
        )

        def __delete_policy(
            self,
            id,
            o,
            **kwargs
        ):
            """Delete Specific Policy Object  # noqa: E501

            Deletes a specific policy object for the authenticated user.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_policy(id, o, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): Policy ID for the specified policy
                o (int): Organization ID for the specified policy

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['o'] = \
                o
            return self.call_with_http_info(**kwargs)

        self.delete_policy = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/policies/{id}',
                'operation_id': 'delete_policy',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'o',
                ],
                'required': [
                    'id',
                    'o',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'o':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'o': 'o',
                },
                'location_map': {
                    'id': 'path',
                    'o': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_policy
        )

        def __execute_policy(
            self,
            id,
            o,
            action,
            **kwargs
        ):
            """Schedule a Policy for Immediate Remediation  # noqa: E501

            Schedule a policy for immediate remediation.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.execute_policy(id, o, action, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): Policy ID for the specified policy
                o (int): Organization ID for the specified policy
                action (str): Specify the action to be taken. Possible values: remediateAll, remediateServer Format: action=remediateServer

            Keyword Args:
                server_id (int): Specify the specific Server to run the policy for. Only applicable when action is set to \"remediateServer\" Format: serverId=123456. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['o'] = \
                o
            kwargs['action'] = \
                action
            return self.call_with_http_info(**kwargs)

        self.execute_policy = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/policies/{id}/action',
                'operation_id': 'execute_policy',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'o',
                    'action',
                    'server_id',
                ],
                'required': [
                    'id',
                    'o',
                    'action',
                ],
                'nullable': [
                ],
                'enum': [
                    'action',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('action',): {

                        "REMEDIATEALL": "remediateAll",
                        "REMEDIATESERVER": "remediateServer"
                    },
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'o':
                        (int,),
                    'action':
                        (str,),
                    'server_id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'o': 'o',
                    'action': 'action',
                    'server_id': 'serverId',
                },
                'location_map': {
                    'id': 'path',
                    'o': 'query',
                    'action': 'query',
                    'server_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__execute_policy
        )

        def __generate_policy_device_filter_preview(
            self,
            policy_device_filters_preview,
            **kwargs
        ):
            """Policy Device Filters Preview  # noqa: E501

            Generate a preview of the list of devices that matches the provided device filter set. For more information, see [Device Filter Preview - Filter Parameters](/developer-portal/device-filters).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.generate_policy_device_filter_preview(policy_device_filters_preview, async_req=True)
            >>> result = thread.get()

            Args:
                policy_device_filters_preview (PolicyDeviceFiltersPreview):

            Keyword Args:
                o (int): Organization ID. If omitted, results will include all organizations for the authenticated user.. [optional]
                page (int): The page of results you wish to be returned with page numbers starting at 0.. [optional] if omitted the server will use the default value of 0
                limit (int): A limit on the number of results to be returned, between 1 and 200 with a default of 25. Use with page parameter.. [optional] if omitted the server will use the default value of 25
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [PolicyDeviceFiltersOutput]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['policy_device_filters_preview'] = \
                policy_device_filters_preview
            return self.call_with_http_info(**kwargs)

        self.generate_policy_device_filter_preview = _Endpoint(
            settings={
                'response_type': ([PolicyDeviceFiltersOutput],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/policies/device-filters-preview',
                'operation_id': 'generate_policy_device_filter_preview',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'policy_device_filters_preview',
                    'o',
                    'page',
                    'limit',
                ],
                'required': [
                    'policy_device_filters_preview',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 200,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'policy_device_filters_preview':
                        (PolicyDeviceFiltersPreview,),
                    'o':
                        (int,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'o': 'o',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'policy_device_filters_preview': 'body',
                    'o': 'query',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__generate_policy_device_filter_preview
        )

        def __get_policies(
            self,
            o,
            **kwargs
        ):
            """List All Policy Objects  # noqa: E501

            Retrieves a list of all policy objects for the authenticated user.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_policies(o, async_req=True)
            >>> result = thread.get()

            Args:
                o (int): Organization ID for retrieving policies

            Keyword Args:
                page (int): The page of results you wish to be returned with page numbers starting at 0.. [optional] if omitted the server will use the default value of 0
                limit (int): A limit on the number of results to be returned, between 1 and 500, with a default of 500. Use with page parameter.. [optional] if omitted the server will use the default value of 500
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Policy]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['o'] = \
                o
            return self.call_with_http_info(**kwargs)

        self.get_policies = _Endpoint(
            settings={
                'response_type': ([Policy],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/policies',
                'operation_id': 'get_policies',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'o',
                    'page',
                    'limit',
                ],
                'required': [
                    'o',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'o':
                        (int,),
                    'page':
                        (int,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'o': 'o',
                    'page': 'page',
                    'limit': 'limit',
                },
                'location_map': {
                    'o': 'query',
                    'page': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_policies
        )

        def __get_policy(
            self,
            id,
            o,
            **kwargs
        ):
            """List Specific Policy Object  # noqa: E501

            Returns a specific policy object for the authenticated user.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_policy(id, o, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): Policy ID for the specified policy
                o (int): Organization ID for the specified policy

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Policy
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['o'] = \
                o
            return self.call_with_http_info(**kwargs)

        self.get_policy = _Endpoint(
            settings={
                'response_type': (Policy,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/policies/{id}',
                'operation_id': 'get_policy',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'o',
                ],
                'required': [
                    'id',
                    'o',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'o':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'o': 'o',
                },
                'location_map': {
                    'id': 'path',
                    'o': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_policy
        )

        def __get_policy_stats(
            self,
            **kwargs
        ):
            """List Policy Compliance Stats  # noqa: E501

            Retrieve policy compliance statistics for all policies.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_policy_stats(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                o (int): Organization ID for retrieving policy stats.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [PolicyStats]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_policy_stats = _Endpoint(
            settings={
                'response_type': ([PolicyStats],),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/policystats',
                'operation_id': 'get_policy_stats',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'o',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'o':
                        (int,),
                },
                'attribute_map': {
                    'o': 'o',
                },
                'location_map': {
                    'o': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_policy_stats
        )

        def __update_policy(
            self,
            id,
            o,
            policy,
            **kwargs
        ):
            """Updates a specific policy object for the authenticated user.  # noqa: E501

            Updates a specific policy object for the authenticated user.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_policy(id, o, policy, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): Policy ID for the specified policy
                o (int): Organization ID for the specified policy
                policy (Policy):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['o'] = \
                o
            kwargs['policy'] = \
                policy
            return self.call_with_http_info(**kwargs)

        self.update_policy = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/policies/{id}',
                'operation_id': 'update_policy',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'o',
                    'policy',
                ],
                'required': [
                    'id',
                    'o',
                    'policy',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'o':
                        (int,),
                    'policy':
                        (Policy,),
                },
                'attribute_map': {
                    'id': 'id',
                    'o': 'o',
                },
                'location_map': {
                    'id': 'path',
                    'o': 'query',
                    'policy': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_policy
        )
