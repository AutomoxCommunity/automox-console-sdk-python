# coding: utf-8

"""
    Automox Console API

    API for use with the Automox Console  # noqa: E501

    OpenAPI spec version: 2021-09-20
    Contact: support@automox.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'user_id': 'int',
        'server_id': 'int',
        'organization_id': 'int',
        'policy_id': 'int',
        'data': 'OneOfEventData',
        'server_name': 'str',
        'policy_name': 'str',
        'policy_type_name': 'str',
        'create_time': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'user_id': 'user_id',
        'server_id': 'server_id',
        'organization_id': 'organization_id',
        'policy_id': 'policy_id',
        'data': 'data',
        'server_name': 'server_name',
        'policy_name': 'policy_name',
        'policy_type_name': 'policy_type_name',
        'create_time': 'create_time'
    }

    def __init__(self, id=None, name=None, user_id=None, server_id=None, organization_id=None, policy_id=None, data=None, server_name=None, policy_name=None, policy_type_name=None, create_time=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._user_id = None
        self._server_id = None
        self._organization_id = None
        self._policy_id = None
        self._data = None
        self._server_name = None
        self._policy_name = None
        self._policy_type_name = None
        self._create_time = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if user_id is not None:
            self.user_id = user_id
        if server_id is not None:
            self.server_id = server_id
        if organization_id is not None:
            self.organization_id = organization_id
        if policy_id is not None:
            self.policy_id = policy_id
        if data is not None:
            self.data = data
        if server_name is not None:
            self.server_name = server_name
        if policy_name is not None:
            self.policy_name = policy_name
        if policy_type_name is not None:
            self.policy_type_name = policy_type_name
        if create_time is not None:
            self.create_time = create_time

    @property
    def id(self):
        """Gets the id of this Event.  # noqa: E501


        :return: The id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Event.  # noqa: E501

        Event type  # noqa: E501

        :return: The name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Event.

        Event type  # noqa: E501

        :param name: The name of this Event.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def user_id(self):
        """Gets the user_id of this Event.  # noqa: E501


        :return: The user_id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Event.


        :param user_id: The user_id of this Event.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def server_id(self):
        """Gets the server_id of this Event.  # noqa: E501


        :return: The server_id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this Event.


        :param server_id: The server_id of this Event.  # noqa: E501
        :type: int
        """

        self._server_id = server_id

    @property
    def organization_id(self):
        """Gets the organization_id of this Event.  # noqa: E501


        :return: The organization_id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Event.


        :param organization_id: The organization_id of this Event.  # noqa: E501
        :type: int
        """

        self._organization_id = organization_id

    @property
    def policy_id(self):
        """Gets the policy_id of this Event.  # noqa: E501


        :return: The policy_id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this Event.


        :param policy_id: The policy_id of this Event.  # noqa: E501
        :type: int
        """

        self._policy_id = policy_id

    @property
    def data(self):
        """Gets the data of this Event.  # noqa: E501


        :return: The data of this Event.  # noqa: E501
        :rtype: OneOfEventData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Event.


        :param data: The data of this Event.  # noqa: E501
        :type: OneOfEventData
        """

        self._data = data

    @property
    def server_name(self):
        """Gets the server_name of this Event.  # noqa: E501


        :return: The server_name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this Event.


        :param server_name: The server_name of this Event.  # noqa: E501
        :type: str
        """

        self._server_name = server_name

    @property
    def policy_name(self):
        """Gets the policy_name of this Event.  # noqa: E501


        :return: The policy_name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this Event.


        :param policy_name: The policy_name of this Event.  # noqa: E501
        :type: str
        """

        self._policy_name = policy_name

    @property
    def policy_type_name(self):
        """Gets the policy_type_name of this Event.  # noqa: E501


        :return: The policy_type_name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._policy_type_name

    @policy_type_name.setter
    def policy_type_name(self, policy_type_name):
        """Sets the policy_type_name of this Event.


        :param policy_type_name: The policy_type_name of this Event.  # noqa: E501
        :type: str
        """
        allowed_values = ["patch", "custom", "required_software"]  # noqa: E501
        if policy_type_name not in allowed_values:
            raise ValueError(
                "Invalid value for `policy_type_name` ({0}), must be one of {1}"  # noqa: E501
                .format(policy_type_name, allowed_values)
            )

        self._policy_type_name = policy_type_name

    @property
    def create_time(self):
        """Gets the create_time of this Event.  # noqa: E501


        :return: The create_time of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Event.


        :param create_time: The create_time of this Event.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
