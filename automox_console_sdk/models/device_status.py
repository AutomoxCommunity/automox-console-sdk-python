# coding: utf-8

"""
    Automox Console API

    API for use with the Automox Console  # noqa: E501

    OpenAPI spec version: 2021-09-20
    Contact: support@automox.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeviceStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_status': 'str',
        'agent_status': 'str',
        'policy_status': 'str',
        'policy_statuses': 'list[DeviceStatusPolicyStatuses]'
    }

    attribute_map = {
        'device_status': 'device_status',
        'agent_status': 'agent_status',
        'policy_status': 'policy_status',
        'policy_statuses': 'policy_statuses'
    }

    def __init__(self, device_status=None, agent_status=None, policy_status=None, policy_statuses=None):  # noqa: E501
        """DeviceStatus - a model defined in Swagger"""  # noqa: E501
        self._device_status = None
        self._agent_status = None
        self._policy_status = None
        self._policy_statuses = None
        self.discriminator = None
        if device_status is not None:
            self.device_status = device_status
        if agent_status is not None:
            self.agent_status = agent_status
        if policy_status is not None:
            self.policy_status = policy_status
        if policy_statuses is not None:
            self.policy_statuses = policy_statuses

    @property
    def device_status(self):
        """Gets the device_status of this DeviceStatus.  # noqa: E501


        :return: The device_status of this DeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._device_status

    @device_status.setter
    def device_status(self, device_status):
        """Sets the device_status of this DeviceStatus.


        :param device_status: The device_status of this DeviceStatus.  # noqa: E501
        :type: str
        """

        self._device_status = device_status

    @property
    def agent_status(self):
        """Gets the agent_status of this DeviceStatus.  # noqa: E501


        :return: The agent_status of this DeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._agent_status

    @agent_status.setter
    def agent_status(self, agent_status):
        """Sets the agent_status of this DeviceStatus.


        :param agent_status: The agent_status of this DeviceStatus.  # noqa: E501
        :type: str
        """

        self._agent_status = agent_status

    @property
    def policy_status(self):
        """Gets the policy_status of this DeviceStatus.  # noqa: E501


        :return: The policy_status of this DeviceStatus.  # noqa: E501
        :rtype: str
        """
        return self._policy_status

    @policy_status.setter
    def policy_status(self, policy_status):
        """Sets the policy_status of this DeviceStatus.


        :param policy_status: The policy_status of this DeviceStatus.  # noqa: E501
        :type: str
        """

        self._policy_status = policy_status

    @property
    def policy_statuses(self):
        """Gets the policy_statuses of this DeviceStatus.  # noqa: E501


        :return: The policy_statuses of this DeviceStatus.  # noqa: E501
        :rtype: list[DeviceStatusPolicyStatuses]
        """
        return self._policy_statuses

    @policy_statuses.setter
    def policy_statuses(self, policy_statuses):
        """Sets the policy_statuses of this DeviceStatus.


        :param policy_statuses: The policy_statuses of this DeviceStatus.  # noqa: E501
        :type: list[DeviceStatusPolicyStatuses]
        """

        self._policy_statuses = policy_statuses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
