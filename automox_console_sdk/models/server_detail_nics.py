# coding: utf-8

"""
    Automox Console API

    API for use with the Automox Console  # noqa: E501

    OpenAPI spec version: 2021-09-20
    Contact: support@automox.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServerDetailNICS(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connected': 'bool',
        'device': 'str',
        'ips': 'list[str]',
        'mac': 'str',
        'type': 'str',
        'vendor': 'str'
    }

    attribute_map = {
        'connected': 'CONNECTED',
        'device': 'DEVICE',
        'ips': 'IPS',
        'mac': 'MAC',
        'type': 'TYPE',
        'vendor': 'VENDOR'
    }

    def __init__(self, connected=None, device=None, ips=None, mac=None, type=None, vendor=None):  # noqa: E501
        """ServerDetailNICS - a model defined in Swagger"""  # noqa: E501
        self._connected = None
        self._device = None
        self._ips = None
        self._mac = None
        self._type = None
        self._vendor = None
        self.discriminator = None
        if connected is not None:
            self.connected = connected
        if device is not None:
            self.device = device
        if ips is not None:
            self.ips = ips
        if mac is not None:
            self.mac = mac
        if type is not None:
            self.type = type
        if vendor is not None:
            self.vendor = vendor

    @property
    def connected(self):
        """Gets the connected of this ServerDetailNICS.  # noqa: E501


        :return: The connected of this ServerDetailNICS.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this ServerDetailNICS.


        :param connected: The connected of this ServerDetailNICS.  # noqa: E501
        :type: bool
        """

        self._connected = connected

    @property
    def device(self):
        """Gets the device of this ServerDetailNICS.  # noqa: E501


        :return: The device of this ServerDetailNICS.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this ServerDetailNICS.


        :param device: The device of this ServerDetailNICS.  # noqa: E501
        :type: str
        """

        self._device = device

    @property
    def ips(self):
        """Gets the ips of this ServerDetailNICS.  # noqa: E501


        :return: The ips of this ServerDetailNICS.  # noqa: E501
        :rtype: list[str]
        """
        return self._ips

    @ips.setter
    def ips(self, ips):
        """Sets the ips of this ServerDetailNICS.


        :param ips: The ips of this ServerDetailNICS.  # noqa: E501
        :type: list[str]
        """

        self._ips = ips

    @property
    def mac(self):
        """Gets the mac of this ServerDetailNICS.  # noqa: E501


        :return: The mac of this ServerDetailNICS.  # noqa: E501
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this ServerDetailNICS.


        :param mac: The mac of this ServerDetailNICS.  # noqa: E501
        :type: str
        """

        self._mac = mac

    @property
    def type(self):
        """Gets the type of this ServerDetailNICS.  # noqa: E501


        :return: The type of this ServerDetailNICS.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServerDetailNICS.


        :param type: The type of this ServerDetailNICS.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def vendor(self):
        """Gets the vendor of this ServerDetailNICS.  # noqa: E501


        :return: The vendor of this ServerDetailNICS.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this ServerDetailNICS.


        :param vendor: The vendor of this ServerDetailNICS.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServerDetailNICS, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerDetailNICS):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
