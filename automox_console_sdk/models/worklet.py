# coding: utf-8

"""
    Automox Console API

    API for use with the Automox Console  # noqa: E501

    OpenAPI spec version: 2021-09-20
    Contact: support@automox.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Worklet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'category': 'str',
        'keywords': 'list[str]',
        'os_family': 'str',
        'creator': 'str',
        'is_verified': 'bool',
        'create_time': 'datetime',
        'update_time': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'category': 'category',
        'keywords': 'keywords',
        'os_family': 'os_family',
        'creator': 'creator',
        'is_verified': 'is_verified',
        'create_time': 'create_time',
        'update_time': 'update_time'
    }

    def __init__(self, id=None, name=None, description=None, category=None, keywords=None, os_family=None, creator=None, is_verified=None, create_time=None, update_time=None):  # noqa: E501
        """Worklet - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._category = None
        self._keywords = None
        self._os_family = None
        self._creator = None
        self._is_verified = None
        self._create_time = None
        self._update_time = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        if description is not None:
            self.description = description
        self.category = category
        if keywords is not None:
            self.keywords = keywords
        self.os_family = os_family
        self.creator = creator
        self.is_verified = is_verified
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time

    @property
    def id(self):
        """Gets the id of this Worklet.  # noqa: E501


        :return: The id of this Worklet.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Worklet.


        :param id: The id of this Worklet.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Worklet.  # noqa: E501


        :return: The name of this Worklet.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Worklet.


        :param name: The name of this Worklet.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Worklet.  # noqa: E501


        :return: The description of this Worklet.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Worklet.


        :param description: The description of this Worklet.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def category(self):
        """Gets the category of this Worklet.  # noqa: E501


        :return: The category of this Worklet.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Worklet.


        :param category: The category of this Worklet.  # noqa: E501
        :type: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def keywords(self):
        """Gets the keywords of this Worklet.  # noqa: E501


        :return: The keywords of this Worklet.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Worklet.


        :param keywords: The keywords of this Worklet.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def os_family(self):
        """Gets the os_family of this Worklet.  # noqa: E501


        :return: The os_family of this Worklet.  # noqa: E501
        :rtype: str
        """
        return self._os_family

    @os_family.setter
    def os_family(self, os_family):
        """Sets the os_family of this Worklet.


        :param os_family: The os_family of this Worklet.  # noqa: E501
        :type: str
        """
        if os_family is None:
            raise ValueError("Invalid value for `os_family`, must not be `None`")  # noqa: E501

        self._os_family = os_family

    @property
    def creator(self):
        """Gets the creator of this Worklet.  # noqa: E501


        :return: The creator of this Worklet.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Worklet.


        :param creator: The creator of this Worklet.  # noqa: E501
        :type: str
        """
        if creator is None:
            raise ValueError("Invalid value for `creator`, must not be `None`")  # noqa: E501

        self._creator = creator

    @property
    def is_verified(self):
        """Gets the is_verified of this Worklet.  # noqa: E501


        :return: The is_verified of this Worklet.  # noqa: E501
        :rtype: bool
        """
        return self._is_verified

    @is_verified.setter
    def is_verified(self, is_verified):
        """Sets the is_verified of this Worklet.


        :param is_verified: The is_verified of this Worklet.  # noqa: E501
        :type: bool
        """
        if is_verified is None:
            raise ValueError("Invalid value for `is_verified`, must not be `None`")  # noqa: E501

        self._is_verified = is_verified

    @property
    def create_time(self):
        """Gets the create_time of this Worklet.  # noqa: E501


        :return: The create_time of this Worklet.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Worklet.


        :param create_time: The create_time of this Worklet.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this Worklet.  # noqa: E501


        :return: The update_time of this Worklet.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Worklet.


        :param update_time: The update_time of this Worklet.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Worklet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Worklet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
