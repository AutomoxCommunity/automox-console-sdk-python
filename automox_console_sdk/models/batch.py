# coding: utf-8

"""
    Automox Console API

    API for use with the Automox Console  # noqa: E501

    OpenAPI spec version: 2021-09-20
    Contact: support@automox.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Batch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'total_jobs': 'int',
        'pending_jobs': 'int',
        'processed_jobs': 'int',
        'progress': 'int',
        'failed_jobs': 'int',
        'created_at': 'datetime',
        'cancelled_at': 'datetime',
        'finished_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'total_jobs': 'total_jobs',
        'pending_jobs': 'pending_jobs',
        'processed_jobs': 'processed_jobs',
        'progress': 'progress',
        'failed_jobs': 'failed_jobs',
        'created_at': 'created_at',
        'cancelled_at': 'cancelled_at',
        'finished_at': 'finished_at'
    }

    def __init__(self, id=None, total_jobs=None, pending_jobs=None, processed_jobs=None, progress=None, failed_jobs=None, created_at=None, cancelled_at=None, finished_at=None):  # noqa: E501
        """Batch - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._total_jobs = None
        self._pending_jobs = None
        self._processed_jobs = None
        self._progress = None
        self._failed_jobs = None
        self._created_at = None
        self._cancelled_at = None
        self._finished_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if total_jobs is not None:
            self.total_jobs = total_jobs
        if pending_jobs is not None:
            self.pending_jobs = pending_jobs
        if processed_jobs is not None:
            self.processed_jobs = processed_jobs
        if progress is not None:
            self.progress = progress
        if failed_jobs is not None:
            self.failed_jobs = failed_jobs
        if created_at is not None:
            self.created_at = created_at
        if cancelled_at is not None:
            self.cancelled_at = cancelled_at
        if finished_at is not None:
            self.finished_at = finished_at

    @property
    def id(self):
        """Gets the id of this Batch.  # noqa: E501


        :return: The id of this Batch.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Batch.


        :param id: The id of this Batch.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def total_jobs(self):
        """Gets the total_jobs of this Batch.  # noqa: E501


        :return: The total_jobs of this Batch.  # noqa: E501
        :rtype: int
        """
        return self._total_jobs

    @total_jobs.setter
    def total_jobs(self, total_jobs):
        """Sets the total_jobs of this Batch.


        :param total_jobs: The total_jobs of this Batch.  # noqa: E501
        :type: int
        """

        self._total_jobs = total_jobs

    @property
    def pending_jobs(self):
        """Gets the pending_jobs of this Batch.  # noqa: E501


        :return: The pending_jobs of this Batch.  # noqa: E501
        :rtype: int
        """
        return self._pending_jobs

    @pending_jobs.setter
    def pending_jobs(self, pending_jobs):
        """Sets the pending_jobs of this Batch.


        :param pending_jobs: The pending_jobs of this Batch.  # noqa: E501
        :type: int
        """

        self._pending_jobs = pending_jobs

    @property
    def processed_jobs(self):
        """Gets the processed_jobs of this Batch.  # noqa: E501


        :return: The processed_jobs of this Batch.  # noqa: E501
        :rtype: int
        """
        return self._processed_jobs

    @processed_jobs.setter
    def processed_jobs(self, processed_jobs):
        """Sets the processed_jobs of this Batch.


        :param processed_jobs: The processed_jobs of this Batch.  # noqa: E501
        :type: int
        """

        self._processed_jobs = processed_jobs

    @property
    def progress(self):
        """Gets the progress of this Batch.  # noqa: E501


        :return: The progress of this Batch.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this Batch.


        :param progress: The progress of this Batch.  # noqa: E501
        :type: int
        """

        self._progress = progress

    @property
    def failed_jobs(self):
        """Gets the failed_jobs of this Batch.  # noqa: E501


        :return: The failed_jobs of this Batch.  # noqa: E501
        :rtype: int
        """
        return self._failed_jobs

    @failed_jobs.setter
    def failed_jobs(self, failed_jobs):
        """Sets the failed_jobs of this Batch.


        :param failed_jobs: The failed_jobs of this Batch.  # noqa: E501
        :type: int
        """

        self._failed_jobs = failed_jobs

    @property
    def created_at(self):
        """Gets the created_at of this Batch.  # noqa: E501


        :return: The created_at of this Batch.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Batch.


        :param created_at: The created_at of this Batch.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def cancelled_at(self):
        """Gets the cancelled_at of this Batch.  # noqa: E501


        :return: The cancelled_at of this Batch.  # noqa: E501
        :rtype: datetime
        """
        return self._cancelled_at

    @cancelled_at.setter
    def cancelled_at(self, cancelled_at):
        """Sets the cancelled_at of this Batch.


        :param cancelled_at: The cancelled_at of this Batch.  # noqa: E501
        :type: datetime
        """

        self._cancelled_at = cancelled_at

    @property
    def finished_at(self):
        """Gets the finished_at of this Batch.  # noqa: E501


        :return: The finished_at of this Batch.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this Batch.


        :param finished_at: The finished_at of this Batch.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Batch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Batch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
