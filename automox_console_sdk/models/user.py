# coding: utf-8

"""
    Automox Console API

    API for use with the Automox Console  # noqa: E501

    OpenAPI spec version: 2021-09-20
    Contact: support@automox.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'firstname': 'str',
        'lastname': 'str',
        'email': 'str',
        'features': 'UserFeatures',
        'prefs': 'list[UserPrefs]',
        'orgs': 'list[UserOrgs]',
        'tags': 'list[str]',
        'saml_enabled': 'bool',
        'rbac_roles': 'list[UserRbacRoles]'
    }

    attribute_map = {
        'id': 'id',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'email': 'email',
        'features': 'features',
        'prefs': 'prefs',
        'orgs': 'orgs',
        'tags': 'tags',
        'saml_enabled': 'saml_enabled',
        'rbac_roles': 'rbac_roles'
    }

    def __init__(self, id=None, firstname=None, lastname=None, email=None, features=None, prefs=None, orgs=None, tags=None, saml_enabled=None, rbac_roles=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._firstname = None
        self._lastname = None
        self._email = None
        self._features = None
        self._prefs = None
        self._orgs = None
        self._tags = None
        self._saml_enabled = None
        self._rbac_roles = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if email is not None:
            self.email = email
        if features is not None:
            self.features = features
        if prefs is not None:
            self.prefs = prefs
        if orgs is not None:
            self.orgs = orgs
        if tags is not None:
            self.tags = tags
        if saml_enabled is not None:
            self.saml_enabled = saml_enabled
        if rbac_roles is not None:
            self.rbac_roles = rbac_roles

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def firstname(self):
        """Gets the firstname of this User.  # noqa: E501


        :return: The firstname of this User.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this User.


        :param firstname: The firstname of this User.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this User.  # noqa: E501


        :return: The lastname of this User.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this User.


        :param lastname: The lastname of this User.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def features(self):
        """Gets the features of this User.  # noqa: E501


        :return: The features of this User.  # noqa: E501
        :rtype: UserFeatures
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this User.


        :param features: The features of this User.  # noqa: E501
        :type: UserFeatures
        """

        self._features = features

    @property
    def prefs(self):
        """Gets the prefs of this User.  # noqa: E501


        :return: The prefs of this User.  # noqa: E501
        :rtype: list[UserPrefs]
        """
        return self._prefs

    @prefs.setter
    def prefs(self, prefs):
        """Sets the prefs of this User.


        :param prefs: The prefs of this User.  # noqa: E501
        :type: list[UserPrefs]
        """

        self._prefs = prefs

    @property
    def orgs(self):
        """Gets the orgs of this User.  # noqa: E501


        :return: The orgs of this User.  # noqa: E501
        :rtype: list[UserOrgs]
        """
        return self._orgs

    @orgs.setter
    def orgs(self, orgs):
        """Sets the orgs of this User.


        :param orgs: The orgs of this User.  # noqa: E501
        :type: list[UserOrgs]
        """

        self._orgs = orgs

    @property
    def tags(self):
        """Gets the tags of this User.  # noqa: E501


        :return: The tags of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this User.


        :param tags: The tags of this User.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def saml_enabled(self):
        """Gets the saml_enabled of this User.  # noqa: E501


        :return: The saml_enabled of this User.  # noqa: E501
        :rtype: bool
        """
        return self._saml_enabled

    @saml_enabled.setter
    def saml_enabled(self, saml_enabled):
        """Sets the saml_enabled of this User.


        :param saml_enabled: The saml_enabled of this User.  # noqa: E501
        :type: bool
        """

        self._saml_enabled = saml_enabled

    @property
    def rbac_roles(self):
        """Gets the rbac_roles of this User.  # noqa: E501


        :return: The rbac_roles of this User.  # noqa: E501
        :rtype: list[UserRbacRoles]
        """
        return self._rbac_roles

    @rbac_roles.setter
    def rbac_roles(self, rbac_roles):
        """Sets the rbac_roles of this User.


        :param rbac_roles: The rbac_roles of this User.  # noqa: E501
        :type: list[UserRbacRoles]
        """

        self._rbac_roles = rbac_roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
