# coding: utf-8

"""
    Automox Console API

    API for use with the Automox Console  # noqa: E501

    OpenAPI spec version: 2021-08-10
    Contact: support@automox.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateAndCreatePolicyConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_patch': 'bool',
        'patch_rule': 'str',
        'auto_reboot': 'bool',
        'filter_type': 'str',
        'notify_user': 'bool',
        'evaluation_code': 'str',
        'include_optional': 'bool',
        'remediation_code': 'str',
        'installation_code': 'str',
        'notify_reboot_user': 'bool',
        'notify_deferred_reboot_user': 'bool',
        'custom_notification_max_delays': 'int',
        'custom_notification_patch_message': 'str',
        'custom_notification_reboot_message': 'str',
        'custom_notification_deferment_periods': 'list[int]',
        'custom_notification_patch_message_mac': 'str',
        'custom_notification_reboot_message_mac': 'str',
        'custom_pending_reboot_notification_message': 'str',
        'notify_user_message_timeout': 'int',
        'notify_user_auto_deferral_enabled': 'bool',
        'notify_deferred_reboot_user_message_timeout': 'int',
        'notify_deferred_reboot_user_auto_deferral_enabled': 'bool',
        'custom_pending_reboot_notification_max_delays': 'int',
        'custom_pending_reboot_notification_message_mac': 'str',
        'custom_pending_reboot_notification_deferment_periods': 'list[int]'
    }

    attribute_map = {
        'auto_patch': 'auto_patch',
        'patch_rule': 'patch_rule',
        'auto_reboot': 'auto_reboot',
        'filter_type': 'filter_type',
        'notify_user': 'notify_user',
        'evaluation_code': 'evaluation_code',
        'include_optional': 'include_optional',
        'remediation_code': 'remediation_code',
        'installation_code': 'installation_code',
        'notify_reboot_user': 'notify_reboot_user',
        'notify_deferred_reboot_user': 'notify_deferred_reboot_user',
        'custom_notification_max_delays': 'custom_notification_max_delays',
        'custom_notification_patch_message': 'custom_notification_patch_message',
        'custom_notification_reboot_message': 'custom_notification_reboot_message',
        'custom_notification_deferment_periods': 'custom_notification_deferment_periods',
        'custom_notification_patch_message_mac': 'custom_notification_patch_message_mac',
        'custom_notification_reboot_message_mac': 'custom_notification_reboot_message_mac',
        'custom_pending_reboot_notification_message': 'custom_pending_reboot_notification_message',
        'notify_user_message_timeout': 'notify_user_message_timeout',
        'notify_user_auto_deferral_enabled': 'notify_user_auto_deferral_enabled',
        'notify_deferred_reboot_user_message_timeout': 'notify_deferred_reboot_user_message_timeout',
        'notify_deferred_reboot_user_auto_deferral_enabled': 'notify_deferred_reboot_user_auto_deferral_enabled',
        'custom_pending_reboot_notification_max_delays': 'custom_pending_reboot_notification_max_delays',
        'custom_pending_reboot_notification_message_mac': 'custom_pending_reboot_notification_message_mac',
        'custom_pending_reboot_notification_deferment_periods': 'custom_pending_reboot_notification_deferment_periods'
    }

    def __init__(self, auto_patch=None, patch_rule=None, auto_reboot=None, filter_type=None, notify_user=None, evaluation_code=None, include_optional=None, remediation_code=None, installation_code=None, notify_reboot_user=None, notify_deferred_reboot_user=None, custom_notification_max_delays=None, custom_notification_patch_message=None, custom_notification_reboot_message=None, custom_notification_deferment_periods=None, custom_notification_patch_message_mac=None, custom_notification_reboot_message_mac=None, custom_pending_reboot_notification_message=None, notify_user_message_timeout=15, notify_user_auto_deferral_enabled=None, notify_deferred_reboot_user_message_timeout=15, notify_deferred_reboot_user_auto_deferral_enabled=None, custom_pending_reboot_notification_max_delays=None, custom_pending_reboot_notification_message_mac=None, custom_pending_reboot_notification_deferment_periods=None):  # noqa: E501
        """UpdateAndCreatePolicyConfiguration - a model defined in Swagger"""  # noqa: E501
        self._auto_patch = None
        self._patch_rule = None
        self._auto_reboot = None
        self._filter_type = None
        self._notify_user = None
        self._evaluation_code = None
        self._include_optional = None
        self._remediation_code = None
        self._installation_code = None
        self._notify_reboot_user = None
        self._notify_deferred_reboot_user = None
        self._custom_notification_max_delays = None
        self._custom_notification_patch_message = None
        self._custom_notification_reboot_message = None
        self._custom_notification_deferment_periods = None
        self._custom_notification_patch_message_mac = None
        self._custom_notification_reboot_message_mac = None
        self._custom_pending_reboot_notification_message = None
        self._notify_user_message_timeout = None
        self._notify_user_auto_deferral_enabled = None
        self._notify_deferred_reboot_user_message_timeout = None
        self._notify_deferred_reboot_user_auto_deferral_enabled = None
        self._custom_pending_reboot_notification_max_delays = None
        self._custom_pending_reboot_notification_message_mac = None
        self._custom_pending_reboot_notification_deferment_periods = None
        self.discriminator = None
        self.auto_patch = auto_patch
        self.patch_rule = patch_rule
        self.auto_reboot = auto_reboot
        if filter_type is not None:
            self.filter_type = filter_type
        self.notify_user = notify_user
        if evaluation_code is not None:
            self.evaluation_code = evaluation_code
        if include_optional is not None:
            self.include_optional = include_optional
        if remediation_code is not None:
            self.remediation_code = remediation_code
        if installation_code is not None:
            self.installation_code = installation_code
        if notify_reboot_user is not None:
            self.notify_reboot_user = notify_reboot_user
        if notify_deferred_reboot_user is not None:
            self.notify_deferred_reboot_user = notify_deferred_reboot_user
        if custom_notification_max_delays is not None:
            self.custom_notification_max_delays = custom_notification_max_delays
        if custom_notification_patch_message is not None:
            self.custom_notification_patch_message = custom_notification_patch_message
        if custom_notification_reboot_message is not None:
            self.custom_notification_reboot_message = custom_notification_reboot_message
        if custom_notification_deferment_periods is not None:
            self.custom_notification_deferment_periods = custom_notification_deferment_periods
        if custom_notification_patch_message_mac is not None:
            self.custom_notification_patch_message_mac = custom_notification_patch_message_mac
        if custom_notification_reboot_message_mac is not None:
            self.custom_notification_reboot_message_mac = custom_notification_reboot_message_mac
        if custom_pending_reboot_notification_message is not None:
            self.custom_pending_reboot_notification_message = custom_pending_reboot_notification_message
        if notify_user_message_timeout is not None:
            self.notify_user_message_timeout = notify_user_message_timeout
        if notify_user_auto_deferral_enabled is not None:
            self.notify_user_auto_deferral_enabled = notify_user_auto_deferral_enabled
        if notify_deferred_reboot_user_message_timeout is not None:
            self.notify_deferred_reboot_user_message_timeout = notify_deferred_reboot_user_message_timeout
        if notify_deferred_reboot_user_auto_deferral_enabled is not None:
            self.notify_deferred_reboot_user_auto_deferral_enabled = notify_deferred_reboot_user_auto_deferral_enabled
        if custom_pending_reboot_notification_max_delays is not None:
            self.custom_pending_reboot_notification_max_delays = custom_pending_reboot_notification_max_delays
        if custom_pending_reboot_notification_message_mac is not None:
            self.custom_pending_reboot_notification_message_mac = custom_pending_reboot_notification_message_mac
        if custom_pending_reboot_notification_deferment_periods is not None:
            self.custom_pending_reboot_notification_deferment_periods = custom_pending_reboot_notification_deferment_periods

    @property
    def auto_patch(self):
        """Gets the auto_patch of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The auto_patch of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._auto_patch

    @auto_patch.setter
    def auto_patch(self, auto_patch):
        """Sets the auto_patch of this UpdateAndCreatePolicyConfiguration.


        :param auto_patch: The auto_patch of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: bool
        """
        if auto_patch is None:
            raise ValueError("Invalid value for `auto_patch`, must not be `None`")  # noqa: E501

        self._auto_patch = auto_patch

    @property
    def patch_rule(self):
        """Gets the patch_rule of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The patch_rule of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._patch_rule

    @patch_rule.setter
    def patch_rule(self, patch_rule):
        """Sets the patch_rule of this UpdateAndCreatePolicyConfiguration.


        :param patch_rule: The patch_rule of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: str
        """
        if patch_rule is None:
            raise ValueError("Invalid value for `patch_rule`, must not be `None`")  # noqa: E501

        self._patch_rule = patch_rule

    @property
    def auto_reboot(self):
        """Gets the auto_reboot of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The auto_reboot of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._auto_reboot

    @auto_reboot.setter
    def auto_reboot(self, auto_reboot):
        """Sets the auto_reboot of this UpdateAndCreatePolicyConfiguration.


        :param auto_reboot: The auto_reboot of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: bool
        """
        if auto_reboot is None:
            raise ValueError("Invalid value for `auto_reboot`, must not be `None`")  # noqa: E501

        self._auto_reboot = auto_reboot

    @property
    def filter_type(self):
        """Gets the filter_type of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The filter_type of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """Sets the filter_type of this UpdateAndCreatePolicyConfiguration.


        :param filter_type: The filter_type of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: str
        """

        self._filter_type = filter_type

    @property
    def notify_user(self):
        """Gets the notify_user of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The notify_user of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._notify_user

    @notify_user.setter
    def notify_user(self, notify_user):
        """Sets the notify_user of this UpdateAndCreatePolicyConfiguration.


        :param notify_user: The notify_user of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: bool
        """
        if notify_user is None:
            raise ValueError("Invalid value for `notify_user`, must not be `None`")  # noqa: E501

        self._notify_user = notify_user

    @property
    def evaluation_code(self):
        """Gets the evaluation_code of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The evaluation_code of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_code

    @evaluation_code.setter
    def evaluation_code(self, evaluation_code):
        """Sets the evaluation_code of this UpdateAndCreatePolicyConfiguration.


        :param evaluation_code: The evaluation_code of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: str
        """

        self._evaluation_code = evaluation_code

    @property
    def include_optional(self):
        """Gets the include_optional of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The include_optional of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._include_optional

    @include_optional.setter
    def include_optional(self, include_optional):
        """Sets the include_optional of this UpdateAndCreatePolicyConfiguration.


        :param include_optional: The include_optional of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: bool
        """

        self._include_optional = include_optional

    @property
    def remediation_code(self):
        """Gets the remediation_code of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The remediation_code of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._remediation_code

    @remediation_code.setter
    def remediation_code(self, remediation_code):
        """Sets the remediation_code of this UpdateAndCreatePolicyConfiguration.


        :param remediation_code: The remediation_code of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: str
        """

        self._remediation_code = remediation_code

    @property
    def installation_code(self):
        """Gets the installation_code of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The installation_code of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._installation_code

    @installation_code.setter
    def installation_code(self, installation_code):
        """Sets the installation_code of this UpdateAndCreatePolicyConfiguration.


        :param installation_code: The installation_code of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: str
        """

        self._installation_code = installation_code

    @property
    def notify_reboot_user(self):
        """Gets the notify_reboot_user of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The notify_reboot_user of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._notify_reboot_user

    @notify_reboot_user.setter
    def notify_reboot_user(self, notify_reboot_user):
        """Sets the notify_reboot_user of this UpdateAndCreatePolicyConfiguration.


        :param notify_reboot_user: The notify_reboot_user of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: bool
        """

        self._notify_reboot_user = notify_reboot_user

    @property
    def notify_deferred_reboot_user(self):
        """Gets the notify_deferred_reboot_user of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The notify_deferred_reboot_user of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._notify_deferred_reboot_user

    @notify_deferred_reboot_user.setter
    def notify_deferred_reboot_user(self, notify_deferred_reboot_user):
        """Sets the notify_deferred_reboot_user of this UpdateAndCreatePolicyConfiguration.


        :param notify_deferred_reboot_user: The notify_deferred_reboot_user of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: bool
        """

        self._notify_deferred_reboot_user = notify_deferred_reboot_user

    @property
    def custom_notification_max_delays(self):
        """Gets the custom_notification_max_delays of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The custom_notification_max_delays of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._custom_notification_max_delays

    @custom_notification_max_delays.setter
    def custom_notification_max_delays(self, custom_notification_max_delays):
        """Sets the custom_notification_max_delays of this UpdateAndCreatePolicyConfiguration.


        :param custom_notification_max_delays: The custom_notification_max_delays of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: int
        """

        self._custom_notification_max_delays = custom_notification_max_delays

    @property
    def custom_notification_patch_message(self):
        """Gets the custom_notification_patch_message of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The custom_notification_patch_message of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._custom_notification_patch_message

    @custom_notification_patch_message.setter
    def custom_notification_patch_message(self, custom_notification_patch_message):
        """Sets the custom_notification_patch_message of this UpdateAndCreatePolicyConfiguration.


        :param custom_notification_patch_message: The custom_notification_patch_message of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: str
        """

        self._custom_notification_patch_message = custom_notification_patch_message

    @property
    def custom_notification_reboot_message(self):
        """Gets the custom_notification_reboot_message of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The custom_notification_reboot_message of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._custom_notification_reboot_message

    @custom_notification_reboot_message.setter
    def custom_notification_reboot_message(self, custom_notification_reboot_message):
        """Sets the custom_notification_reboot_message of this UpdateAndCreatePolicyConfiguration.


        :param custom_notification_reboot_message: The custom_notification_reboot_message of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: str
        """

        self._custom_notification_reboot_message = custom_notification_reboot_message

    @property
    def custom_notification_deferment_periods(self):
        """Gets the custom_notification_deferment_periods of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The custom_notification_deferment_periods of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: list[int]
        """
        return self._custom_notification_deferment_periods

    @custom_notification_deferment_periods.setter
    def custom_notification_deferment_periods(self, custom_notification_deferment_periods):
        """Sets the custom_notification_deferment_periods of this UpdateAndCreatePolicyConfiguration.


        :param custom_notification_deferment_periods: The custom_notification_deferment_periods of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: list[int]
        """

        self._custom_notification_deferment_periods = custom_notification_deferment_periods

    @property
    def custom_notification_patch_message_mac(self):
        """Gets the custom_notification_patch_message_mac of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The custom_notification_patch_message_mac of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._custom_notification_patch_message_mac

    @custom_notification_patch_message_mac.setter
    def custom_notification_patch_message_mac(self, custom_notification_patch_message_mac):
        """Sets the custom_notification_patch_message_mac of this UpdateAndCreatePolicyConfiguration.


        :param custom_notification_patch_message_mac: The custom_notification_patch_message_mac of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: str
        """

        self._custom_notification_patch_message_mac = custom_notification_patch_message_mac

    @property
    def custom_notification_reboot_message_mac(self):
        """Gets the custom_notification_reboot_message_mac of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The custom_notification_reboot_message_mac of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._custom_notification_reboot_message_mac

    @custom_notification_reboot_message_mac.setter
    def custom_notification_reboot_message_mac(self, custom_notification_reboot_message_mac):
        """Sets the custom_notification_reboot_message_mac of this UpdateAndCreatePolicyConfiguration.


        :param custom_notification_reboot_message_mac: The custom_notification_reboot_message_mac of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: str
        """

        self._custom_notification_reboot_message_mac = custom_notification_reboot_message_mac

    @property
    def custom_pending_reboot_notification_message(self):
        """Gets the custom_pending_reboot_notification_message of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The custom_pending_reboot_notification_message of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._custom_pending_reboot_notification_message

    @custom_pending_reboot_notification_message.setter
    def custom_pending_reboot_notification_message(self, custom_pending_reboot_notification_message):
        """Sets the custom_pending_reboot_notification_message of this UpdateAndCreatePolicyConfiguration.


        :param custom_pending_reboot_notification_message: The custom_pending_reboot_notification_message of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: str
        """

        self._custom_pending_reboot_notification_message = custom_pending_reboot_notification_message

    @property
    def notify_user_message_timeout(self):
        """Gets the notify_user_message_timeout of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The notify_user_message_timeout of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._notify_user_message_timeout

    @notify_user_message_timeout.setter
    def notify_user_message_timeout(self, notify_user_message_timeout):
        """Sets the notify_user_message_timeout of this UpdateAndCreatePolicyConfiguration.


        :param notify_user_message_timeout: The notify_user_message_timeout of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: int
        """

        self._notify_user_message_timeout = notify_user_message_timeout

    @property
    def notify_user_auto_deferral_enabled(self):
        """Gets the notify_user_auto_deferral_enabled of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The notify_user_auto_deferral_enabled of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._notify_user_auto_deferral_enabled

    @notify_user_auto_deferral_enabled.setter
    def notify_user_auto_deferral_enabled(self, notify_user_auto_deferral_enabled):
        """Sets the notify_user_auto_deferral_enabled of this UpdateAndCreatePolicyConfiguration.


        :param notify_user_auto_deferral_enabled: The notify_user_auto_deferral_enabled of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: bool
        """

        self._notify_user_auto_deferral_enabled = notify_user_auto_deferral_enabled

    @property
    def notify_deferred_reboot_user_message_timeout(self):
        """Gets the notify_deferred_reboot_user_message_timeout of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The notify_deferred_reboot_user_message_timeout of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._notify_deferred_reboot_user_message_timeout

    @notify_deferred_reboot_user_message_timeout.setter
    def notify_deferred_reboot_user_message_timeout(self, notify_deferred_reboot_user_message_timeout):
        """Sets the notify_deferred_reboot_user_message_timeout of this UpdateAndCreatePolicyConfiguration.


        :param notify_deferred_reboot_user_message_timeout: The notify_deferred_reboot_user_message_timeout of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: int
        """

        self._notify_deferred_reboot_user_message_timeout = notify_deferred_reboot_user_message_timeout

    @property
    def notify_deferred_reboot_user_auto_deferral_enabled(self):
        """Gets the notify_deferred_reboot_user_auto_deferral_enabled of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The notify_deferred_reboot_user_auto_deferral_enabled of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._notify_deferred_reboot_user_auto_deferral_enabled

    @notify_deferred_reboot_user_auto_deferral_enabled.setter
    def notify_deferred_reboot_user_auto_deferral_enabled(self, notify_deferred_reboot_user_auto_deferral_enabled):
        """Sets the notify_deferred_reboot_user_auto_deferral_enabled of this UpdateAndCreatePolicyConfiguration.


        :param notify_deferred_reboot_user_auto_deferral_enabled: The notify_deferred_reboot_user_auto_deferral_enabled of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: bool
        """

        self._notify_deferred_reboot_user_auto_deferral_enabled = notify_deferred_reboot_user_auto_deferral_enabled

    @property
    def custom_pending_reboot_notification_max_delays(self):
        """Gets the custom_pending_reboot_notification_max_delays of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The custom_pending_reboot_notification_max_delays of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._custom_pending_reboot_notification_max_delays

    @custom_pending_reboot_notification_max_delays.setter
    def custom_pending_reboot_notification_max_delays(self, custom_pending_reboot_notification_max_delays):
        """Sets the custom_pending_reboot_notification_max_delays of this UpdateAndCreatePolicyConfiguration.


        :param custom_pending_reboot_notification_max_delays: The custom_pending_reboot_notification_max_delays of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: int
        """

        self._custom_pending_reboot_notification_max_delays = custom_pending_reboot_notification_max_delays

    @property
    def custom_pending_reboot_notification_message_mac(self):
        """Gets the custom_pending_reboot_notification_message_mac of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The custom_pending_reboot_notification_message_mac of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._custom_pending_reboot_notification_message_mac

    @custom_pending_reboot_notification_message_mac.setter
    def custom_pending_reboot_notification_message_mac(self, custom_pending_reboot_notification_message_mac):
        """Sets the custom_pending_reboot_notification_message_mac of this UpdateAndCreatePolicyConfiguration.


        :param custom_pending_reboot_notification_message_mac: The custom_pending_reboot_notification_message_mac of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: str
        """

        self._custom_pending_reboot_notification_message_mac = custom_pending_reboot_notification_message_mac

    @property
    def custom_pending_reboot_notification_deferment_periods(self):
        """Gets the custom_pending_reboot_notification_deferment_periods of this UpdateAndCreatePolicyConfiguration.  # noqa: E501


        :return: The custom_pending_reboot_notification_deferment_periods of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :rtype: list[int]
        """
        return self._custom_pending_reboot_notification_deferment_periods

    @custom_pending_reboot_notification_deferment_periods.setter
    def custom_pending_reboot_notification_deferment_periods(self, custom_pending_reboot_notification_deferment_periods):
        """Sets the custom_pending_reboot_notification_deferment_periods of this UpdateAndCreatePolicyConfiguration.


        :param custom_pending_reboot_notification_deferment_periods: The custom_pending_reboot_notification_deferment_periods of this UpdateAndCreatePolicyConfiguration.  # noqa: E501
        :type: list[int]
        """

        self._custom_pending_reboot_notification_deferment_periods = custom_pending_reboot_notification_deferment_periods

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateAndCreatePolicyConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateAndCreatePolicyConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
