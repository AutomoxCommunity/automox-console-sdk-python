# coding: utf-8

"""
    Automox Console API

    API for use with the Automox Console  # noqa: E501

    OpenAPI spec version: 2021-09-20
    Contact: support@automox.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IdQueuesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'command_type_name': 'str',
        'args': 'str'
    }

    attribute_map = {
        'command_type_name': 'command_type_name',
        'args': 'args'
    }

    def __init__(self, command_type_name=None, args=None):  # noqa: E501
        """IdQueuesBody - a model defined in Swagger"""  # noqa: E501
        self._command_type_name = None
        self._args = None
        self.discriminator = None
        self.command_type_name = command_type_name
        if args is not None:
            self.args = args

    @property
    def command_type_name(self):
        """Gets the command_type_name of this IdQueuesBody.  # noqa: E501


        :return: The command_type_name of this IdQueuesBody.  # noqa: E501
        :rtype: str
        """
        return self._command_type_name

    @command_type_name.setter
    def command_type_name(self, command_type_name):
        """Sets the command_type_name of this IdQueuesBody.


        :param command_type_name: The command_type_name of this IdQueuesBody.  # noqa: E501
        :type: str
        """
        if command_type_name is None:
            raise ValueError("Invalid value for `command_type_name`, must not be `None`")  # noqa: E501
        allowed_values = ["GetOS", "InstallUpdate", "InstallAllUpdates", "policy_{policy_id}_test", "policy_{policy_id}_remediate", "Reboot"]  # noqa: E501
        if command_type_name not in allowed_values:
            raise ValueError(
                "Invalid value for `command_type_name` ({0}), must be one of {1}"  # noqa: E501
                .format(command_type_name, allowed_values)
            )

        self._command_type_name = command_type_name

    @property
    def args(self):
        """Gets the args of this IdQueuesBody.  # noqa: E501

        Only needed for `InstallUpdate`. Includes the name of the patches to install.  # noqa: E501

        :return: The args of this IdQueuesBody.  # noqa: E501
        :rtype: str
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this IdQueuesBody.

        Only needed for `InstallUpdate`. Includes the name of the patches to install.  # noqa: E501

        :param args: The args of this IdQueuesBody.  # noqa: E501
        :type: str
        """

        self._args = args

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdQueuesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdQueuesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
