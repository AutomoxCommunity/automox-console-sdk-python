# coding: utf-8

"""
    Automox Console API

    API for use with the Automox Console  # noqa: E501

    OpenAPI spec version: 2021-09-20
    Contact: support@automox.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServerWithPolicies(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'os_version_id': 'int',
        'server_group_id': 'int',
        'organization_id': 'int',
        'uuid': 'str',
        'name': 'str',
        'instance_id': 'str',
        'refresh_interval': 'int',
        'last_update_time': 'str',
        'last_refresh_time': 'str',
        'uptime': 'int',
        'needs_reboot': 'bool',
        'timezone': 'str',
        'tags': 'list[str]',
        'deleted': 'bool',
        'create_time': 'datetime',
        'os_version': 'str',
        'os_name': 'str',
        'os_family': 'str',
        'ip_addrs': 'list[str]',
        'ip_addrs_private': 'list[str]',
        'hostname': 'str',
        'patches': 'int',
        'details': 'ServerDetail',
        'agent_version': 'str',
        'custom_name': 'str',
        'exception': 'bool',
        'total_count': 'int',
        'server_policies': 'list[Policy]',
        'policy_status': 'list[ServerPolicyStatus]',
        'last_scan_failed': 'bool',
        'pending': 'bool',
        'compliant': 'bool',
        'display_name': 'str',
        'commands': 'list[Command]',
        'pending_patches': 'int',
        'connected': 'bool',
        'last_process_time': 'str',
        'next_patch_time': 'str',
        'notification_count': 'int',
        'reboot_notification_count': 'int',
        'patch_deferral_count': 'int',
        'is_delayed_by_notification': 'bool',
        'reboot_is_delayed_by_notification': 'bool',
        'is_delayed_by_user': 'bool',
        'reboot_is_delayed_by_user': 'bool',
        'last_disconnect_time': 'datetime',
        'needs_attention': 'bool',
        'serial_number': 'str',
        'status': 'DeviceStatus',
        'last_logged_in_user': 'str'
    }

    attribute_map = {
        'id': 'id',
        'os_version_id': 'os_version_id',
        'server_group_id': 'server_group_id',
        'organization_id': 'organization_id',
        'uuid': 'uuid',
        'name': 'name',
        'instance_id': 'instance_id',
        'refresh_interval': 'refresh_interval',
        'last_update_time': 'last_update_time',
        'last_refresh_time': 'last_refresh_time',
        'uptime': 'uptime',
        'needs_reboot': 'needs_reboot',
        'timezone': 'timezone',
        'tags': 'tags',
        'deleted': 'deleted',
        'create_time': 'create_time',
        'os_version': 'os_version',
        'os_name': 'os_name',
        'os_family': 'os_family',
        'ip_addrs': 'ip_addrs',
        'ip_addrs_private': 'ip_addrs_private',
        'hostname': 'hostname',
        'patches': 'patches',
        'details': 'details',
        'agent_version': 'agent_version',
        'custom_name': 'custom_name',
        'exception': 'exception',
        'total_count': 'total_count',
        'server_policies': 'server_policies',
        'policy_status': 'policy_status',
        'last_scan_failed': 'last_scan_failed',
        'pending': 'pending',
        'compliant': 'compliant',
        'display_name': 'display_name',
        'commands': 'commands',
        'pending_patches': 'pending_patches',
        'connected': 'connected',
        'last_process_time': 'last_process_time',
        'next_patch_time': 'next_patch_time',
        'notification_count': 'notification_count',
        'reboot_notification_count': 'reboot_notification_count',
        'patch_deferral_count': 'patch_deferral_count',
        'is_delayed_by_notification': 'is_delayed_by_notification',
        'reboot_is_delayed_by_notification': 'reboot_is_delayed_by_notification',
        'is_delayed_by_user': 'is_delayed_by_user',
        'reboot_is_delayed_by_user': 'reboot_is_delayed_by_user',
        'last_disconnect_time': 'last_disconnect_time',
        'needs_attention': 'needs_attention',
        'serial_number': 'serial_number',
        'status': 'status',
        'last_logged_in_user': 'last_logged_in_user'
    }

    def __init__(self, id=None, os_version_id=None, server_group_id=None, organization_id=None, uuid=None, name=None, instance_id=None, refresh_interval=None, last_update_time=None, last_refresh_time=None, uptime=None, needs_reboot=None, timezone=None, tags=None, deleted=None, create_time=None, os_version=None, os_name=None, os_family=None, ip_addrs=None, ip_addrs_private=None, hostname=None, patches=None, details=None, agent_version=None, custom_name=None, exception=None, total_count=None, server_policies=None, policy_status=None, last_scan_failed=None, pending=None, compliant=None, display_name=None, commands=None, pending_patches=None, connected=None, last_process_time=None, next_patch_time=None, notification_count=None, reboot_notification_count=None, patch_deferral_count=None, is_delayed_by_notification=None, reboot_is_delayed_by_notification=None, is_delayed_by_user=None, reboot_is_delayed_by_user=None, last_disconnect_time=None, needs_attention=None, serial_number=None, status=None, last_logged_in_user=None):  # noqa: E501
        """ServerWithPolicies - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._os_version_id = None
        self._server_group_id = None
        self._organization_id = None
        self._uuid = None
        self._name = None
        self._instance_id = None
        self._refresh_interval = None
        self._last_update_time = None
        self._last_refresh_time = None
        self._uptime = None
        self._needs_reboot = None
        self._timezone = None
        self._tags = None
        self._deleted = None
        self._create_time = None
        self._os_version = None
        self._os_name = None
        self._os_family = None
        self._ip_addrs = None
        self._ip_addrs_private = None
        self._hostname = None
        self._patches = None
        self._details = None
        self._agent_version = None
        self._custom_name = None
        self._exception = None
        self._total_count = None
        self._server_policies = None
        self._policy_status = None
        self._last_scan_failed = None
        self._pending = None
        self._compliant = None
        self._display_name = None
        self._commands = None
        self._pending_patches = None
        self._connected = None
        self._last_process_time = None
        self._next_patch_time = None
        self._notification_count = None
        self._reboot_notification_count = None
        self._patch_deferral_count = None
        self._is_delayed_by_notification = None
        self._reboot_is_delayed_by_notification = None
        self._is_delayed_by_user = None
        self._reboot_is_delayed_by_user = None
        self._last_disconnect_time = None
        self._needs_attention = None
        self._serial_number = None
        self._status = None
        self._last_logged_in_user = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if os_version_id is not None:
            self.os_version_id = os_version_id
        if server_group_id is not None:
            self.server_group_id = server_group_id
        if organization_id is not None:
            self.organization_id = organization_id
        if uuid is not None:
            self.uuid = uuid
        if name is not None:
            self.name = name
        if instance_id is not None:
            self.instance_id = instance_id
        if refresh_interval is not None:
            self.refresh_interval = refresh_interval
        if last_update_time is not None:
            self.last_update_time = last_update_time
        if last_refresh_time is not None:
            self.last_refresh_time = last_refresh_time
        if uptime is not None:
            self.uptime = uptime
        if needs_reboot is not None:
            self.needs_reboot = needs_reboot
        if timezone is not None:
            self.timezone = timezone
        if tags is not None:
            self.tags = tags
        if deleted is not None:
            self.deleted = deleted
        if create_time is not None:
            self.create_time = create_time
        if os_version is not None:
            self.os_version = os_version
        if os_name is not None:
            self.os_name = os_name
        if os_family is not None:
            self.os_family = os_family
        if ip_addrs is not None:
            self.ip_addrs = ip_addrs
        if ip_addrs_private is not None:
            self.ip_addrs_private = ip_addrs_private
        if hostname is not None:
            self.hostname = hostname
        if patches is not None:
            self.patches = patches
        if details is not None:
            self.details = details
        if agent_version is not None:
            self.agent_version = agent_version
        if custom_name is not None:
            self.custom_name = custom_name
        if exception is not None:
            self.exception = exception
        if total_count is not None:
            self.total_count = total_count
        if server_policies is not None:
            self.server_policies = server_policies
        if policy_status is not None:
            self.policy_status = policy_status
        if last_scan_failed is not None:
            self.last_scan_failed = last_scan_failed
        if pending is not None:
            self.pending = pending
        if compliant is not None:
            self.compliant = compliant
        if display_name is not None:
            self.display_name = display_name
        if commands is not None:
            self.commands = commands
        if pending_patches is not None:
            self.pending_patches = pending_patches
        if connected is not None:
            self.connected = connected
        if last_process_time is not None:
            self.last_process_time = last_process_time
        if next_patch_time is not None:
            self.next_patch_time = next_patch_time
        if notification_count is not None:
            self.notification_count = notification_count
        if reboot_notification_count is not None:
            self.reboot_notification_count = reboot_notification_count
        if patch_deferral_count is not None:
            self.patch_deferral_count = patch_deferral_count
        if is_delayed_by_notification is not None:
            self.is_delayed_by_notification = is_delayed_by_notification
        if reboot_is_delayed_by_notification is not None:
            self.reboot_is_delayed_by_notification = reboot_is_delayed_by_notification
        if is_delayed_by_user is not None:
            self.is_delayed_by_user = is_delayed_by_user
        if reboot_is_delayed_by_user is not None:
            self.reboot_is_delayed_by_user = reboot_is_delayed_by_user
        if last_disconnect_time is not None:
            self.last_disconnect_time = last_disconnect_time
        if needs_attention is not None:
            self.needs_attention = needs_attention
        if serial_number is not None:
            self.serial_number = serial_number
        if status is not None:
            self.status = status
        if last_logged_in_user is not None:
            self.last_logged_in_user = last_logged_in_user

    @property
    def id(self):
        """Gets the id of this ServerWithPolicies.  # noqa: E501


        :return: The id of this ServerWithPolicies.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServerWithPolicies.


        :param id: The id of this ServerWithPolicies.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def os_version_id(self):
        """Gets the os_version_id of this ServerWithPolicies.  # noqa: E501


        :return: The os_version_id of this ServerWithPolicies.  # noqa: E501
        :rtype: int
        """
        return self._os_version_id

    @os_version_id.setter
    def os_version_id(self, os_version_id):
        """Sets the os_version_id of this ServerWithPolicies.


        :param os_version_id: The os_version_id of this ServerWithPolicies.  # noqa: E501
        :type: int
        """

        self._os_version_id = os_version_id

    @property
    def server_group_id(self):
        """Gets the server_group_id of this ServerWithPolicies.  # noqa: E501


        :return: The server_group_id of this ServerWithPolicies.  # noqa: E501
        :rtype: int
        """
        return self._server_group_id

    @server_group_id.setter
    def server_group_id(self, server_group_id):
        """Sets the server_group_id of this ServerWithPolicies.


        :param server_group_id: The server_group_id of this ServerWithPolicies.  # noqa: E501
        :type: int
        """

        self._server_group_id = server_group_id

    @property
    def organization_id(self):
        """Gets the organization_id of this ServerWithPolicies.  # noqa: E501


        :return: The organization_id of this ServerWithPolicies.  # noqa: E501
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ServerWithPolicies.


        :param organization_id: The organization_id of this ServerWithPolicies.  # noqa: E501
        :type: int
        """

        self._organization_id = organization_id

    @property
    def uuid(self):
        """Gets the uuid of this ServerWithPolicies.  # noqa: E501


        :return: The uuid of this ServerWithPolicies.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ServerWithPolicies.


        :param uuid: The uuid of this ServerWithPolicies.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this ServerWithPolicies.  # noqa: E501


        :return: The name of this ServerWithPolicies.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServerWithPolicies.


        :param name: The name of this ServerWithPolicies.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def instance_id(self):
        """Gets the instance_id of this ServerWithPolicies.  # noqa: E501


        :return: The instance_id of this ServerWithPolicies.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this ServerWithPolicies.


        :param instance_id: The instance_id of this ServerWithPolicies.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def refresh_interval(self):
        """Gets the refresh_interval of this ServerWithPolicies.  # noqa: E501


        :return: The refresh_interval of this ServerWithPolicies.  # noqa: E501
        :rtype: int
        """
        return self._refresh_interval

    @refresh_interval.setter
    def refresh_interval(self, refresh_interval):
        """Sets the refresh_interval of this ServerWithPolicies.


        :param refresh_interval: The refresh_interval of this ServerWithPolicies.  # noqa: E501
        :type: int
        """

        self._refresh_interval = refresh_interval

    @property
    def last_update_time(self):
        """Gets the last_update_time of this ServerWithPolicies.  # noqa: E501


        :return: The last_update_time of this ServerWithPolicies.  # noqa: E501
        :rtype: str
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this ServerWithPolicies.


        :param last_update_time: The last_update_time of this ServerWithPolicies.  # noqa: E501
        :type: str
        """

        self._last_update_time = last_update_time

    @property
    def last_refresh_time(self):
        """Gets the last_refresh_time of this ServerWithPolicies.  # noqa: E501


        :return: The last_refresh_time of this ServerWithPolicies.  # noqa: E501
        :rtype: str
        """
        return self._last_refresh_time

    @last_refresh_time.setter
    def last_refresh_time(self, last_refresh_time):
        """Sets the last_refresh_time of this ServerWithPolicies.


        :param last_refresh_time: The last_refresh_time of this ServerWithPolicies.  # noqa: E501
        :type: str
        """

        self._last_refresh_time = last_refresh_time

    @property
    def uptime(self):
        """Gets the uptime of this ServerWithPolicies.  # noqa: E501


        :return: The uptime of this ServerWithPolicies.  # noqa: E501
        :rtype: int
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this ServerWithPolicies.


        :param uptime: The uptime of this ServerWithPolicies.  # noqa: E501
        :type: int
        """

        self._uptime = uptime

    @property
    def needs_reboot(self):
        """Gets the needs_reboot of this ServerWithPolicies.  # noqa: E501


        :return: The needs_reboot of this ServerWithPolicies.  # noqa: E501
        :rtype: bool
        """
        return self._needs_reboot

    @needs_reboot.setter
    def needs_reboot(self, needs_reboot):
        """Sets the needs_reboot of this ServerWithPolicies.


        :param needs_reboot: The needs_reboot of this ServerWithPolicies.  # noqa: E501
        :type: bool
        """

        self._needs_reboot = needs_reboot

    @property
    def timezone(self):
        """Gets the timezone of this ServerWithPolicies.  # noqa: E501


        :return: The timezone of this ServerWithPolicies.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this ServerWithPolicies.


        :param timezone: The timezone of this ServerWithPolicies.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def tags(self):
        """Gets the tags of this ServerWithPolicies.  # noqa: E501


        :return: The tags of this ServerWithPolicies.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ServerWithPolicies.


        :param tags: The tags of this ServerWithPolicies.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def deleted(self):
        """Gets the deleted of this ServerWithPolicies.  # noqa: E501


        :return: The deleted of this ServerWithPolicies.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this ServerWithPolicies.


        :param deleted: The deleted of this ServerWithPolicies.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def create_time(self):
        """Gets the create_time of this ServerWithPolicies.  # noqa: E501


        :return: The create_time of this ServerWithPolicies.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ServerWithPolicies.


        :param create_time: The create_time of this ServerWithPolicies.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def os_version(self):
        """Gets the os_version of this ServerWithPolicies.  # noqa: E501


        :return: The os_version of this ServerWithPolicies.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this ServerWithPolicies.


        :param os_version: The os_version of this ServerWithPolicies.  # noqa: E501
        :type: str
        """

        self._os_version = os_version

    @property
    def os_name(self):
        """Gets the os_name of this ServerWithPolicies.  # noqa: E501


        :return: The os_name of this ServerWithPolicies.  # noqa: E501
        :rtype: str
        """
        return self._os_name

    @os_name.setter
    def os_name(self, os_name):
        """Sets the os_name of this ServerWithPolicies.


        :param os_name: The os_name of this ServerWithPolicies.  # noqa: E501
        :type: str
        """

        self._os_name = os_name

    @property
    def os_family(self):
        """Gets the os_family of this ServerWithPolicies.  # noqa: E501


        :return: The os_family of this ServerWithPolicies.  # noqa: E501
        :rtype: str
        """
        return self._os_family

    @os_family.setter
    def os_family(self, os_family):
        """Sets the os_family of this ServerWithPolicies.


        :param os_family: The os_family of this ServerWithPolicies.  # noqa: E501
        :type: str
        """

        self._os_family = os_family

    @property
    def ip_addrs(self):
        """Gets the ip_addrs of this ServerWithPolicies.  # noqa: E501


        :return: The ip_addrs of this ServerWithPolicies.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_addrs

    @ip_addrs.setter
    def ip_addrs(self, ip_addrs):
        """Sets the ip_addrs of this ServerWithPolicies.


        :param ip_addrs: The ip_addrs of this ServerWithPolicies.  # noqa: E501
        :type: list[str]
        """

        self._ip_addrs = ip_addrs

    @property
    def ip_addrs_private(self):
        """Gets the ip_addrs_private of this ServerWithPolicies.  # noqa: E501


        :return: The ip_addrs_private of this ServerWithPolicies.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_addrs_private

    @ip_addrs_private.setter
    def ip_addrs_private(self, ip_addrs_private):
        """Sets the ip_addrs_private of this ServerWithPolicies.


        :param ip_addrs_private: The ip_addrs_private of this ServerWithPolicies.  # noqa: E501
        :type: list[str]
        """

        self._ip_addrs_private = ip_addrs_private

    @property
    def hostname(self):
        """Gets the hostname of this ServerWithPolicies.  # noqa: E501


        :return: The hostname of this ServerWithPolicies.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ServerWithPolicies.


        :param hostname: The hostname of this ServerWithPolicies.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def patches(self):
        """Gets the patches of this ServerWithPolicies.  # noqa: E501


        :return: The patches of this ServerWithPolicies.  # noqa: E501
        :rtype: int
        """
        return self._patches

    @patches.setter
    def patches(self, patches):
        """Sets the patches of this ServerWithPolicies.


        :param patches: The patches of this ServerWithPolicies.  # noqa: E501
        :type: int
        """

        self._patches = patches

    @property
    def details(self):
        """Gets the details of this ServerWithPolicies.  # noqa: E501


        :return: The details of this ServerWithPolicies.  # noqa: E501
        :rtype: ServerDetail
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ServerWithPolicies.


        :param details: The details of this ServerWithPolicies.  # noqa: E501
        :type: ServerDetail
        """

        self._details = details

    @property
    def agent_version(self):
        """Gets the agent_version of this ServerWithPolicies.  # noqa: E501


        :return: The agent_version of this ServerWithPolicies.  # noqa: E501
        :rtype: str
        """
        return self._agent_version

    @agent_version.setter
    def agent_version(self, agent_version):
        """Sets the agent_version of this ServerWithPolicies.


        :param agent_version: The agent_version of this ServerWithPolicies.  # noqa: E501
        :type: str
        """

        self._agent_version = agent_version

    @property
    def custom_name(self):
        """Gets the custom_name of this ServerWithPolicies.  # noqa: E501


        :return: The custom_name of this ServerWithPolicies.  # noqa: E501
        :rtype: str
        """
        return self._custom_name

    @custom_name.setter
    def custom_name(self, custom_name):
        """Sets the custom_name of this ServerWithPolicies.


        :param custom_name: The custom_name of this ServerWithPolicies.  # noqa: E501
        :type: str
        """

        self._custom_name = custom_name

    @property
    def exception(self):
        """Gets the exception of this ServerWithPolicies.  # noqa: E501


        :return: The exception of this ServerWithPolicies.  # noqa: E501
        :rtype: bool
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """Sets the exception of this ServerWithPolicies.


        :param exception: The exception of this ServerWithPolicies.  # noqa: E501
        :type: bool
        """

        self._exception = exception

    @property
    def total_count(self):
        """Gets the total_count of this ServerWithPolicies.  # noqa: E501


        :return: The total_count of this ServerWithPolicies.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ServerWithPolicies.


        :param total_count: The total_count of this ServerWithPolicies.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    @property
    def server_policies(self):
        """Gets the server_policies of this ServerWithPolicies.  # noqa: E501


        :return: The server_policies of this ServerWithPolicies.  # noqa: E501
        :rtype: list[Policy]
        """
        return self._server_policies

    @server_policies.setter
    def server_policies(self, server_policies):
        """Sets the server_policies of this ServerWithPolicies.


        :param server_policies: The server_policies of this ServerWithPolicies.  # noqa: E501
        :type: list[Policy]
        """

        self._server_policies = server_policies

    @property
    def policy_status(self):
        """Gets the policy_status of this ServerWithPolicies.  # noqa: E501


        :return: The policy_status of this ServerWithPolicies.  # noqa: E501
        :rtype: list[ServerPolicyStatus]
        """
        return self._policy_status

    @policy_status.setter
    def policy_status(self, policy_status):
        """Sets the policy_status of this ServerWithPolicies.


        :param policy_status: The policy_status of this ServerWithPolicies.  # noqa: E501
        :type: list[ServerPolicyStatus]
        """

        self._policy_status = policy_status

    @property
    def last_scan_failed(self):
        """Gets the last_scan_failed of this ServerWithPolicies.  # noqa: E501


        :return: The last_scan_failed of this ServerWithPolicies.  # noqa: E501
        :rtype: bool
        """
        return self._last_scan_failed

    @last_scan_failed.setter
    def last_scan_failed(self, last_scan_failed):
        """Sets the last_scan_failed of this ServerWithPolicies.


        :param last_scan_failed: The last_scan_failed of this ServerWithPolicies.  # noqa: E501
        :type: bool
        """

        self._last_scan_failed = last_scan_failed

    @property
    def pending(self):
        """Gets the pending of this ServerWithPolicies.  # noqa: E501


        :return: The pending of this ServerWithPolicies.  # noqa: E501
        :rtype: bool
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this ServerWithPolicies.


        :param pending: The pending of this ServerWithPolicies.  # noqa: E501
        :type: bool
        """

        self._pending = pending

    @property
    def compliant(self):
        """Gets the compliant of this ServerWithPolicies.  # noqa: E501


        :return: The compliant of this ServerWithPolicies.  # noqa: E501
        :rtype: bool
        """
        return self._compliant

    @compliant.setter
    def compliant(self, compliant):
        """Sets the compliant of this ServerWithPolicies.


        :param compliant: The compliant of this ServerWithPolicies.  # noqa: E501
        :type: bool
        """

        self._compliant = compliant

    @property
    def display_name(self):
        """Gets the display_name of this ServerWithPolicies.  # noqa: E501


        :return: The display_name of this ServerWithPolicies.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ServerWithPolicies.


        :param display_name: The display_name of this ServerWithPolicies.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def commands(self):
        """Gets the commands of this ServerWithPolicies.  # noqa: E501


        :return: The commands of this ServerWithPolicies.  # noqa: E501
        :rtype: list[Command]
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """Sets the commands of this ServerWithPolicies.


        :param commands: The commands of this ServerWithPolicies.  # noqa: E501
        :type: list[Command]
        """

        self._commands = commands

    @property
    def pending_patches(self):
        """Gets the pending_patches of this ServerWithPolicies.  # noqa: E501


        :return: The pending_patches of this ServerWithPolicies.  # noqa: E501
        :rtype: int
        """
        return self._pending_patches

    @pending_patches.setter
    def pending_patches(self, pending_patches):
        """Sets the pending_patches of this ServerWithPolicies.


        :param pending_patches: The pending_patches of this ServerWithPolicies.  # noqa: E501
        :type: int
        """

        self._pending_patches = pending_patches

    @property
    def connected(self):
        """Gets the connected of this ServerWithPolicies.  # noqa: E501


        :return: The connected of this ServerWithPolicies.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this ServerWithPolicies.


        :param connected: The connected of this ServerWithPolicies.  # noqa: E501
        :type: bool
        """

        self._connected = connected

    @property
    def last_process_time(self):
        """Gets the last_process_time of this ServerWithPolicies.  # noqa: E501


        :return: The last_process_time of this ServerWithPolicies.  # noqa: E501
        :rtype: str
        """
        return self._last_process_time

    @last_process_time.setter
    def last_process_time(self, last_process_time):
        """Sets the last_process_time of this ServerWithPolicies.


        :param last_process_time: The last_process_time of this ServerWithPolicies.  # noqa: E501
        :type: str
        """

        self._last_process_time = last_process_time

    @property
    def next_patch_time(self):
        """Gets the next_patch_time of this ServerWithPolicies.  # noqa: E501


        :return: The next_patch_time of this ServerWithPolicies.  # noqa: E501
        :rtype: str
        """
        return self._next_patch_time

    @next_patch_time.setter
    def next_patch_time(self, next_patch_time):
        """Sets the next_patch_time of this ServerWithPolicies.


        :param next_patch_time: The next_patch_time of this ServerWithPolicies.  # noqa: E501
        :type: str
        """

        self._next_patch_time = next_patch_time

    @property
    def notification_count(self):
        """Gets the notification_count of this ServerWithPolicies.  # noqa: E501


        :return: The notification_count of this ServerWithPolicies.  # noqa: E501
        :rtype: int
        """
        return self._notification_count

    @notification_count.setter
    def notification_count(self, notification_count):
        """Sets the notification_count of this ServerWithPolicies.


        :param notification_count: The notification_count of this ServerWithPolicies.  # noqa: E501
        :type: int
        """

        self._notification_count = notification_count

    @property
    def reboot_notification_count(self):
        """Gets the reboot_notification_count of this ServerWithPolicies.  # noqa: E501


        :return: The reboot_notification_count of this ServerWithPolicies.  # noqa: E501
        :rtype: int
        """
        return self._reboot_notification_count

    @reboot_notification_count.setter
    def reboot_notification_count(self, reboot_notification_count):
        """Sets the reboot_notification_count of this ServerWithPolicies.


        :param reboot_notification_count: The reboot_notification_count of this ServerWithPolicies.  # noqa: E501
        :type: int
        """

        self._reboot_notification_count = reboot_notification_count

    @property
    def patch_deferral_count(self):
        """Gets the patch_deferral_count of this ServerWithPolicies.  # noqa: E501


        :return: The patch_deferral_count of this ServerWithPolicies.  # noqa: E501
        :rtype: int
        """
        return self._patch_deferral_count

    @patch_deferral_count.setter
    def patch_deferral_count(self, patch_deferral_count):
        """Sets the patch_deferral_count of this ServerWithPolicies.


        :param patch_deferral_count: The patch_deferral_count of this ServerWithPolicies.  # noqa: E501
        :type: int
        """

        self._patch_deferral_count = patch_deferral_count

    @property
    def is_delayed_by_notification(self):
        """Gets the is_delayed_by_notification of this ServerWithPolicies.  # noqa: E501


        :return: The is_delayed_by_notification of this ServerWithPolicies.  # noqa: E501
        :rtype: bool
        """
        return self._is_delayed_by_notification

    @is_delayed_by_notification.setter
    def is_delayed_by_notification(self, is_delayed_by_notification):
        """Sets the is_delayed_by_notification of this ServerWithPolicies.


        :param is_delayed_by_notification: The is_delayed_by_notification of this ServerWithPolicies.  # noqa: E501
        :type: bool
        """

        self._is_delayed_by_notification = is_delayed_by_notification

    @property
    def reboot_is_delayed_by_notification(self):
        """Gets the reboot_is_delayed_by_notification of this ServerWithPolicies.  # noqa: E501


        :return: The reboot_is_delayed_by_notification of this ServerWithPolicies.  # noqa: E501
        :rtype: bool
        """
        return self._reboot_is_delayed_by_notification

    @reboot_is_delayed_by_notification.setter
    def reboot_is_delayed_by_notification(self, reboot_is_delayed_by_notification):
        """Sets the reboot_is_delayed_by_notification of this ServerWithPolicies.


        :param reboot_is_delayed_by_notification: The reboot_is_delayed_by_notification of this ServerWithPolicies.  # noqa: E501
        :type: bool
        """

        self._reboot_is_delayed_by_notification = reboot_is_delayed_by_notification

    @property
    def is_delayed_by_user(self):
        """Gets the is_delayed_by_user of this ServerWithPolicies.  # noqa: E501


        :return: The is_delayed_by_user of this ServerWithPolicies.  # noqa: E501
        :rtype: bool
        """
        return self._is_delayed_by_user

    @is_delayed_by_user.setter
    def is_delayed_by_user(self, is_delayed_by_user):
        """Sets the is_delayed_by_user of this ServerWithPolicies.


        :param is_delayed_by_user: The is_delayed_by_user of this ServerWithPolicies.  # noqa: E501
        :type: bool
        """

        self._is_delayed_by_user = is_delayed_by_user

    @property
    def reboot_is_delayed_by_user(self):
        """Gets the reboot_is_delayed_by_user of this ServerWithPolicies.  # noqa: E501


        :return: The reboot_is_delayed_by_user of this ServerWithPolicies.  # noqa: E501
        :rtype: bool
        """
        return self._reboot_is_delayed_by_user

    @reboot_is_delayed_by_user.setter
    def reboot_is_delayed_by_user(self, reboot_is_delayed_by_user):
        """Sets the reboot_is_delayed_by_user of this ServerWithPolicies.


        :param reboot_is_delayed_by_user: The reboot_is_delayed_by_user of this ServerWithPolicies.  # noqa: E501
        :type: bool
        """

        self._reboot_is_delayed_by_user = reboot_is_delayed_by_user

    @property
    def last_disconnect_time(self):
        """Gets the last_disconnect_time of this ServerWithPolicies.  # noqa: E501


        :return: The last_disconnect_time of this ServerWithPolicies.  # noqa: E501
        :rtype: datetime
        """
        return self._last_disconnect_time

    @last_disconnect_time.setter
    def last_disconnect_time(self, last_disconnect_time):
        """Sets the last_disconnect_time of this ServerWithPolicies.


        :param last_disconnect_time: The last_disconnect_time of this ServerWithPolicies.  # noqa: E501
        :type: datetime
        """

        self._last_disconnect_time = last_disconnect_time

    @property
    def needs_attention(self):
        """Gets the needs_attention of this ServerWithPolicies.  # noqa: E501


        :return: The needs_attention of this ServerWithPolicies.  # noqa: E501
        :rtype: bool
        """
        return self._needs_attention

    @needs_attention.setter
    def needs_attention(self, needs_attention):
        """Sets the needs_attention of this ServerWithPolicies.


        :param needs_attention: The needs_attention of this ServerWithPolicies.  # noqa: E501
        :type: bool
        """

        self._needs_attention = needs_attention

    @property
    def serial_number(self):
        """Gets the serial_number of this ServerWithPolicies.  # noqa: E501


        :return: The serial_number of this ServerWithPolicies.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ServerWithPolicies.


        :param serial_number: The serial_number of this ServerWithPolicies.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def status(self):
        """Gets the status of this ServerWithPolicies.  # noqa: E501


        :return: The status of this ServerWithPolicies.  # noqa: E501
        :rtype: DeviceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ServerWithPolicies.


        :param status: The status of this ServerWithPolicies.  # noqa: E501
        :type: DeviceStatus
        """

        self._status = status

    @property
    def last_logged_in_user(self):
        """Gets the last_logged_in_user of this ServerWithPolicies.  # noqa: E501


        :return: The last_logged_in_user of this ServerWithPolicies.  # noqa: E501
        :rtype: str
        """
        return self._last_logged_in_user

    @last_logged_in_user.setter
    def last_logged_in_user(self, last_logged_in_user):
        """Sets the last_logged_in_user of this ServerWithPolicies.


        :param last_logged_in_user: The last_logged_in_user of this ServerWithPolicies.  # noqa: E501
        :type: str
        """

        self._last_logged_in_user = last_logged_in_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServerWithPolicies, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerWithPolicies):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
