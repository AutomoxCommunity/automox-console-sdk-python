# coding: utf-8

"""
    Automox Console API

    API for use with the Automox Console  # noqa: E501

    OpenAPI spec version: 2021-09-20
    Contact: support@automox.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrePatchPrepatchDevices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'create_time': 'datetime',
        'group': 'str',
        'connected': 'bool',
        'needs_reboot': 'bool',
        'os_family': 'str',
        'compliant': 'bool',
        'patches': 'Patches'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'create_time': 'createTime',
        'group': 'group',
        'connected': 'connected',
        'needs_reboot': 'needsReboot',
        'os_family': 'os_family',
        'compliant': 'compliant',
        'patches': 'patches'
    }

    def __init__(self, id=None, name=None, create_time=None, group=None, connected=None, needs_reboot=None, os_family=None, compliant=None, patches=None):  # noqa: E501
        """PrePatchPrepatchDevices - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._create_time = None
        self._group = None
        self._connected = None
        self._needs_reboot = None
        self._os_family = None
        self._compliant = None
        self._patches = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if create_time is not None:
            self.create_time = create_time
        if group is not None:
            self.group = group
        if connected is not None:
            self.connected = connected
        if needs_reboot is not None:
            self.needs_reboot = needs_reboot
        if os_family is not None:
            self.os_family = os_family
        if compliant is not None:
            self.compliant = compliant
        if patches is not None:
            self.patches = patches

    @property
    def id(self):
        """Gets the id of this PrePatchPrepatchDevices.  # noqa: E501


        :return: The id of this PrePatchPrepatchDevices.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PrePatchPrepatchDevices.


        :param id: The id of this PrePatchPrepatchDevices.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PrePatchPrepatchDevices.  # noqa: E501


        :return: The name of this PrePatchPrepatchDevices.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrePatchPrepatchDevices.


        :param name: The name of this PrePatchPrepatchDevices.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def create_time(self):
        """Gets the create_time of this PrePatchPrepatchDevices.  # noqa: E501


        :return: The create_time of this PrePatchPrepatchDevices.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this PrePatchPrepatchDevices.


        :param create_time: The create_time of this PrePatchPrepatchDevices.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def group(self):
        """Gets the group of this PrePatchPrepatchDevices.  # noqa: E501


        :return: The group of this PrePatchPrepatchDevices.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this PrePatchPrepatchDevices.


        :param group: The group of this PrePatchPrepatchDevices.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def connected(self):
        """Gets the connected of this PrePatchPrepatchDevices.  # noqa: E501


        :return: The connected of this PrePatchPrepatchDevices.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this PrePatchPrepatchDevices.


        :param connected: The connected of this PrePatchPrepatchDevices.  # noqa: E501
        :type: bool
        """

        self._connected = connected

    @property
    def needs_reboot(self):
        """Gets the needs_reboot of this PrePatchPrepatchDevices.  # noqa: E501


        :return: The needs_reboot of this PrePatchPrepatchDevices.  # noqa: E501
        :rtype: bool
        """
        return self._needs_reboot

    @needs_reboot.setter
    def needs_reboot(self, needs_reboot):
        """Sets the needs_reboot of this PrePatchPrepatchDevices.


        :param needs_reboot: The needs_reboot of this PrePatchPrepatchDevices.  # noqa: E501
        :type: bool
        """

        self._needs_reboot = needs_reboot

    @property
    def os_family(self):
        """Gets the os_family of this PrePatchPrepatchDevices.  # noqa: E501


        :return: The os_family of this PrePatchPrepatchDevices.  # noqa: E501
        :rtype: str
        """
        return self._os_family

    @os_family.setter
    def os_family(self, os_family):
        """Sets the os_family of this PrePatchPrepatchDevices.


        :param os_family: The os_family of this PrePatchPrepatchDevices.  # noqa: E501
        :type: str
        """

        self._os_family = os_family

    @property
    def compliant(self):
        """Gets the compliant of this PrePatchPrepatchDevices.  # noqa: E501


        :return: The compliant of this PrePatchPrepatchDevices.  # noqa: E501
        :rtype: bool
        """
        return self._compliant

    @compliant.setter
    def compliant(self, compliant):
        """Sets the compliant of this PrePatchPrepatchDevices.


        :param compliant: The compliant of this PrePatchPrepatchDevices.  # noqa: E501
        :type: bool
        """

        self._compliant = compliant

    @property
    def patches(self):
        """Gets the patches of this PrePatchPrepatchDevices.  # noqa: E501


        :return: The patches of this PrePatchPrepatchDevices.  # noqa: E501
        :rtype: Patches
        """
        return self._patches

    @patches.setter
    def patches(self, patches):
        """Sets the patches of this PrePatchPrepatchDevices.


        :param patches: The patches of this PrePatchPrepatchDevices.  # noqa: E501
        :type: Patches
        """

        self._patches = patches

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrePatchPrepatchDevices, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrePatchPrepatchDevices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
