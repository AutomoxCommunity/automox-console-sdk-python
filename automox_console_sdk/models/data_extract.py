# coding: utf-8

"""
    Automox Console API

    API for use with the Automox Console  # noqa: E501

    OpenAPI spec version: 2021-09-20
    Contact: support@automox.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataExtract(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'organization_id': 'int',
        'user_id': 'int',
        'status': 'str',
        'is_completed': 'bool',
        'created_at': 'datetime',
        'download_expires_at': 'datetime',
        'download_url': 'str',
        'parameters': 'DataExtractParameters'
    }

    attribute_map = {
        'id': 'id',
        'organization_id': 'organization_id',
        'user_id': 'user_id',
        'status': 'status',
        'is_completed': 'is_completed',
        'created_at': 'created_at',
        'download_expires_at': 'download_expires_at',
        'download_url': 'download_url',
        'parameters': 'parameters'
    }

    def __init__(self, id=None, organization_id=None, user_id=None, status=None, is_completed=None, created_at=None, download_expires_at=None, download_url=None, parameters=None):  # noqa: E501
        """DataExtract - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._organization_id = None
        self._user_id = None
        self._status = None
        self._is_completed = None
        self._created_at = None
        self._download_expires_at = None
        self._download_url = None
        self._parameters = None
        self.discriminator = None
        self.id = id
        self.organization_id = organization_id
        self.user_id = user_id
        self.status = status
        self.is_completed = is_completed
        self.created_at = created_at
        self.download_expires_at = download_expires_at
        self.download_url = download_url
        self.parameters = parameters

    @property
    def id(self):
        """Gets the id of this DataExtract.  # noqa: E501


        :return: The id of this DataExtract.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataExtract.


        :param id: The id of this DataExtract.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this DataExtract.  # noqa: E501


        :return: The organization_id of this DataExtract.  # noqa: E501
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this DataExtract.


        :param organization_id: The organization_id of this DataExtract.  # noqa: E501
        :type: int
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def user_id(self):
        """Gets the user_id of this DataExtract.  # noqa: E501


        :return: The user_id of this DataExtract.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DataExtract.


        :param user_id: The user_id of this DataExtract.  # noqa: E501
        :type: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def status(self):
        """Gets the status of this DataExtract.  # noqa: E501


        :return: The status of this DataExtract.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataExtract.


        :param status: The status of this DataExtract.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["queued", "running", "complete", "failed", "canceled", "expired"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def is_completed(self):
        """Gets the is_completed of this DataExtract.  # noqa: E501


        :return: The is_completed of this DataExtract.  # noqa: E501
        :rtype: bool
        """
        return self._is_completed

    @is_completed.setter
    def is_completed(self, is_completed):
        """Sets the is_completed of this DataExtract.


        :param is_completed: The is_completed of this DataExtract.  # noqa: E501
        :type: bool
        """
        if is_completed is None:
            raise ValueError("Invalid value for `is_completed`, must not be `None`")  # noqa: E501

        self._is_completed = is_completed

    @property
    def created_at(self):
        """Gets the created_at of this DataExtract.  # noqa: E501


        :return: The created_at of this DataExtract.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DataExtract.


        :param created_at: The created_at of this DataExtract.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def download_expires_at(self):
        """Gets the download_expires_at of this DataExtract.  # noqa: E501


        :return: The download_expires_at of this DataExtract.  # noqa: E501
        :rtype: datetime
        """
        return self._download_expires_at

    @download_expires_at.setter
    def download_expires_at(self, download_expires_at):
        """Sets the download_expires_at of this DataExtract.


        :param download_expires_at: The download_expires_at of this DataExtract.  # noqa: E501
        :type: datetime
        """
        if download_expires_at is None:
            raise ValueError("Invalid value for `download_expires_at`, must not be `None`")  # noqa: E501

        self._download_expires_at = download_expires_at

    @property
    def download_url(self):
        """Gets the download_url of this DataExtract.  # noqa: E501


        :return: The download_url of this DataExtract.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this DataExtract.


        :param download_url: The download_url of this DataExtract.  # noqa: E501
        :type: str
        """
        if download_url is None:
            raise ValueError("Invalid value for `download_url`, must not be `None`")  # noqa: E501

        self._download_url = download_url

    @property
    def parameters(self):
        """Gets the parameters of this DataExtract.  # noqa: E501


        :return: The parameters of this DataExtract.  # noqa: E501
        :rtype: DataExtractParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DataExtract.


        :param parameters: The parameters of this DataExtract.  # noqa: E501
        :type: DataExtractParameters
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataExtract, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataExtract):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
