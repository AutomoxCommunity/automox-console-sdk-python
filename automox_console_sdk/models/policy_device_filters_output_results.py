# coding: utf-8

"""
    Automox Console API

    API for use with the Automox Console  # noqa: E501

    OpenAPI spec version: 2021-09-20
    Contact: support@automox.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PolicyDeviceFiltersOutputResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'uuid': 'str',
        'name': 'str',
        'custom_name': 'str',
        'os_version': 'str',
        'os_family': 'str',
        'server_group': 'PolicyDeviceFiltersOutputServerGroup',
        'tags': 'list[str]',
        'ip_addr': 'str',
        'ip_addrs_private': 'list[str]',
        'organizational_unit': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'uuid': 'uuid',
        'name': 'name',
        'custom_name': 'custom_name',
        'os_version': 'os_version',
        'os_family': 'os_family',
        'server_group': 'server_group',
        'tags': 'tags',
        'ip_addr': 'ip_addr',
        'ip_addrs_private': 'ip_addrs_private',
        'organizational_unit': 'organizational_unit'
    }

    def __init__(self, id=None, uuid=None, name=None, custom_name=None, os_version=None, os_family=None, server_group=None, tags=None, ip_addr=None, ip_addrs_private=None, organizational_unit=None):  # noqa: E501
        """PolicyDeviceFiltersOutputResults - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._uuid = None
        self._name = None
        self._custom_name = None
        self._os_version = None
        self._os_family = None
        self._server_group = None
        self._tags = None
        self._ip_addr = None
        self._ip_addrs_private = None
        self._organizational_unit = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid
        if name is not None:
            self.name = name
        if custom_name is not None:
            self.custom_name = custom_name
        if os_version is not None:
            self.os_version = os_version
        if os_family is not None:
            self.os_family = os_family
        if server_group is not None:
            self.server_group = server_group
        if tags is not None:
            self.tags = tags
        if ip_addr is not None:
            self.ip_addr = ip_addr
        if ip_addrs_private is not None:
            self.ip_addrs_private = ip_addrs_private
        if organizational_unit is not None:
            self.organizational_unit = organizational_unit

    @property
    def id(self):
        """Gets the id of this PolicyDeviceFiltersOutputResults.  # noqa: E501


        :return: The id of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PolicyDeviceFiltersOutputResults.


        :param id: The id of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this PolicyDeviceFiltersOutputResults.  # noqa: E501


        :return: The uuid of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this PolicyDeviceFiltersOutputResults.


        :param uuid: The uuid of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this PolicyDeviceFiltersOutputResults.  # noqa: E501


        :return: The name of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PolicyDeviceFiltersOutputResults.


        :param name: The name of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def custom_name(self):
        """Gets the custom_name of this PolicyDeviceFiltersOutputResults.  # noqa: E501


        :return: The custom_name of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :rtype: str
        """
        return self._custom_name

    @custom_name.setter
    def custom_name(self, custom_name):
        """Sets the custom_name of this PolicyDeviceFiltersOutputResults.


        :param custom_name: The custom_name of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :type: str
        """

        self._custom_name = custom_name

    @property
    def os_version(self):
        """Gets the os_version of this PolicyDeviceFiltersOutputResults.  # noqa: E501


        :return: The os_version of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this PolicyDeviceFiltersOutputResults.


        :param os_version: The os_version of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :type: str
        """

        self._os_version = os_version

    @property
    def os_family(self):
        """Gets the os_family of this PolicyDeviceFiltersOutputResults.  # noqa: E501


        :return: The os_family of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :rtype: str
        """
        return self._os_family

    @os_family.setter
    def os_family(self, os_family):
        """Sets the os_family of this PolicyDeviceFiltersOutputResults.


        :param os_family: The os_family of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :type: str
        """

        self._os_family = os_family

    @property
    def server_group(self):
        """Gets the server_group of this PolicyDeviceFiltersOutputResults.  # noqa: E501


        :return: The server_group of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :rtype: PolicyDeviceFiltersOutputServerGroup
        """
        return self._server_group

    @server_group.setter
    def server_group(self, server_group):
        """Sets the server_group of this PolicyDeviceFiltersOutputResults.


        :param server_group: The server_group of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :type: PolicyDeviceFiltersOutputServerGroup
        """

        self._server_group = server_group

    @property
    def tags(self):
        """Gets the tags of this PolicyDeviceFiltersOutputResults.  # noqa: E501


        :return: The tags of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PolicyDeviceFiltersOutputResults.


        :param tags: The tags of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def ip_addr(self):
        """Gets the ip_addr of this PolicyDeviceFiltersOutputResults.  # noqa: E501


        :return: The ip_addr of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :rtype: str
        """
        return self._ip_addr

    @ip_addr.setter
    def ip_addr(self, ip_addr):
        """Sets the ip_addr of this PolicyDeviceFiltersOutputResults.


        :param ip_addr: The ip_addr of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :type: str
        """

        self._ip_addr = ip_addr

    @property
    def ip_addrs_private(self):
        """Gets the ip_addrs_private of this PolicyDeviceFiltersOutputResults.  # noqa: E501


        :return: The ip_addrs_private of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_addrs_private

    @ip_addrs_private.setter
    def ip_addrs_private(self, ip_addrs_private):
        """Sets the ip_addrs_private of this PolicyDeviceFiltersOutputResults.


        :param ip_addrs_private: The ip_addrs_private of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :type: list[str]
        """

        self._ip_addrs_private = ip_addrs_private

    @property
    def organizational_unit(self):
        """Gets the organizational_unit of this PolicyDeviceFiltersOutputResults.  # noqa: E501


        :return: The organizational_unit of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :rtype: list[str]
        """
        return self._organizational_unit

    @organizational_unit.setter
    def organizational_unit(self, organizational_unit):
        """Sets the organizational_unit of this PolicyDeviceFiltersOutputResults.


        :param organizational_unit: The organizational_unit of this PolicyDeviceFiltersOutputResults.  # noqa: E501
        :type: list[str]
        """

        self._organizational_unit = organizational_unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyDeviceFiltersOutputResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyDeviceFiltersOutputResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
